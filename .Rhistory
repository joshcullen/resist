dat$date<- lubridate::as_datetime(dat$date)
# Separate tracks by region (N or S)
dat.N<- dat %>% filter(region == "N")
dat.S<- dat %>% filter(region == "S")
#extract beta coeffs (mean)
betas.forage_N<- colMeans(store.betas_Nforage)
#Load env raster data
slopeN<- raster('slope_N.tif')
lulcN<- raster('lulc_N.tif')
covars.N<- brick(lulcN, slopeN)
covars.N$slope_N<- scale(covars.N$slope_N, center = T, scale = T)
# Mask all unused pixels
ind_N<- unique(cellFromXY(slopeN, dat.N[, c("x","y")]))
covars.N_masked<- covars.N
covars.N_masked[setdiff(1:ncell(covars.N_masked), ind_N)] <- NA
scaled_t.ar_N<- path.N$t.ar %>%
scale(center = T, scale = T) %>%
as.data.frame() %>%
summarise(min=min(V1, na.rm = T), mean=mean(V1, na.rm = T), max=max(V1, na.rm = T))
scaled_rain_N<- path.N$rain %>%
scale(center = T, scale = T) %>%
as.data.frame() %>%
summarise(min=min(V1, na.rm = T), mean=mean(V1, na.rm = T), max=max(V1, na.rm = T))
table(path.S.forage$lulc)
### Group 'Campo' and 'Pasto' together to try fixing autocorr issue
path.S.forage<- path.S.forage %>%
mutate_at("lulc", ~recode(., '5' = '1'))
table(path.S.forage$lulc)
table(path.S.transit$lulc)
path.S.transit<- path.S.transit %>%
mutate_at("lulc", ~recode(., '5' = '1'))
table(path.S.transit$lulc)
#remove infrequently used land cover classes
table(path.S.forage$lulc)  #HQ (2) and water (4) both < 15 obs
cond.S<- unique(path.S.forage[path.S.forage$lulc == 4, "seg.id"])
path.S.forage<- path.S.forage[!(path.S.forage$seg.id %in% cond.S),]
str(path.S.forage)
#Update factor levels of LULC to reflect removal of classes
path.S.forage$lulc<- factor(as.character(path.S.forage$lulc))
str(path.S.forage)
ind<- c("slope","t.ar","rain")
mat.S.forage<- model.matrix(~path.S.forage$lulc + 0)
View(mat.S.forage)
colnames(mat.S.forage)<- c("Pasture","Forest","Road")
View(mat.S.forage)
xmat<- data.matrix(cbind(1, mat.S.forage[,-3], path.S.forage[,ind]))
View(xmat)
#reformat seg.id so it is consecutive and numeric
path.S.forage$seg.id<- factor(path.S.forage$seg.id)
levels(path.S.forage$seg.id)<- 1:length(unique(path.S.forage$seg.id))
path.S.forage$seg.id<- as.numeric(path.S.forage$seg.id)
#check seg.id
seg.id<- path.S.forage$seg.id
k<- unique(seg.id)
unique(k-c(1:max(k))) #should be 0
#get y soma
cond=!is.na(path.S.forage$dt)
ysoma=path.S.forage[cond,'dt']
#model args
ngibbs=2000
nburn=ngibbs/2
w=0.1
MaxIter=10000
#priors
var.betas=rep(10,ncol(xmat)) #changed
#Run model
set.seed(2)
mod.forage_S<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
w = w, MaxIter = MaxIter)
#remove infrequently used land cover classes
table(path.S.transit$lulc)  #water (4) < 10 obs
cond.S<- unique(path.S.transit[path.S.transit$lulc == 4, "seg.id"])
path.S.transit<- path.S.transit[!(path.S.transit$seg.id %in% cond.S),]
#Update factor levels of LULC to reflect removal of classes
path.S.transit$lulc<- factor(as.character(path.S.transit$lulc))
ind<- c("slope","t.ar","rain")
mat.S.transit<- model.matrix(~path.S.transit$lulc + 0)
colnames(mat.S.transit)<- c("Pasture","Forest","Road")
View(mat.S.transit)
xmat<- data.matrix(cbind(1, mat.S.transit[,-3], path.S.transit[,ind]))
#reformat seg.id so it is consecutive and numeric
path.S.transit$seg.id<- factor(path.S.transit$seg.id)
levels(path.S.transit$seg.id)<- 1:length(unique(path.S.transit$seg.id))
path.S.transit$seg.id<- as.numeric(path.S.transit$seg.id)
#check seg.id
seg.id<- path.S.transit$seg.id
k<- unique(seg.id)
unique(k-c(1:max(k))) #should be 0
#get y soma
cond=!is.na(path.S.transit$dt)
ysoma=path.S.transit[cond,'dt']
#model args
ngibbs=2000
nburn=ngibbs/2
w=0.1
MaxIter=10000
#priors
var.betas=rep(10,ncol(xmat)) #changed
#Run model
set.seed(2)
mod.transit_S<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
w = w, MaxIter = MaxIter)
#store results
store.llk.forage_S<- mod.forage_S$llk
store.b.forage_S<- mod.forage_S$b.gamma
store.betas.forage_S<- mod.forage_S$betas
#look at overall convergence
plot(store.llk.forage_S, type='l')
abline(v=nburn, col='red')
plot(store.llk.forage_S[(nburn + 1):ngibbs], type='l')
acf(store.llk.forage_S[(nburn + 1):ngibbs])
plot(store.b.forage_S, type='l')
plot(store.b.forage_S[(nburn + 1):ngibbs], type='l')
acf(store.b.forage_S[(nburn + 1):ngibbs])
#look at convergence betas
par(mfrow=c(2,2))
nbetas.forage_S<- ncol(mod.forage_S$betas)
for (i in 1:nbetas.forage_S){
plot(mod.forage_S$betas[,i], type='l')
}
par(mfrow=c(1,1),mar=rep(3,4))
#store results
store.llk.transit_S<- mod.transit_S$llk
store.b.transit_S<- mod.transit_S$b.gamma
store.betas.transit_S<- mod.transit_S$betas
#look at overall convergence
plot(store.llk.transit_S, type='l')
abline(v=nburn, col='red')
plot(store.llk.transit_S[(nburn + 1):ngibbs], type='l')
acf(store.llk.transit_S[(nburn + 1):ngibbs])
plot(store.b.transit_S, type='l')
plot(store.b.transit_S[(nburn + 1):ngibbs], type='l')
acf(store.b.transit_S[(nburn + 1):ngibbs])
#look at convergence betas
par(mfrow=c(2,2))
nbetas.transit_S<- ncol(mod.transit_S$betas)
for (i in 1:nbetas.transit_S){
plot(mod.transit_S$betas[,i], type='l')
}
for (i in 1:nbetas.transit_S){
plot(mod.transit_S$betas[(nburn + 1):ngibbs, i], type='l')
}
par(mfrow=c(1,1),mar=rep(3,4))
xmat<- data.matrix(cbind(1, mat.S.forage[,-3], path.S.forage[,ind]))
#check seg.id
seg.id<- path.S.forage$seg.id
k<- unique(seg.id)
unique(k-c(1:max(k))) #should be 0
#get y soma
cond=!is.na(path.S.forage$dt)
ysoma=path.S.forage[cond,'dt']
#model args
ngibbs=2000
nburn=ngibbs/2
w=0.1
MaxIter=10000
#priors
var.betas=rep(10,ncol(xmat)) #changed
#Run model
set.seed(1)
mod.forage_S<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
w = w, MaxIter = MaxIter)
store.llk.forage_S<- mod.forage_S$llk
store.b.forage_S<- mod.forage_S$b.gamma
store.betas.forage_S<- mod.forage_S$betas
#look at overall convergence
plot(store.llk.forage_S, type='l')
abline(v=nburn, col='red')
plot(store.llk.forage_S[(nburn + 1):ngibbs], type='l')
acf(store.llk.forage_S[(nburn + 1):ngibbs])
plot(store.b.forage_S, type='l')
plot(store.b.forage_S[(nburn + 1):ngibbs], type='l')
acf(store.b.forage_S[(nburn + 1):ngibbs])
#look at convergence betas
par(mfrow=c(2,2))
nbetas.forage_S<- ncol(mod.forage_S$betas)
for (i in 1:nbetas.forage_S){
plot(mod.forage_S$betas[,i], type='l')
}
#model args
ngibbs=5000
nburn=ngibbs/2
w=0.1
MaxIter=10000
#priors
var.betas=rep(10,ncol(xmat)) #changed
#Run model
set.seed(2)
mod.forage_S<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
w = w, MaxIter = MaxIter)
#store results
store.llk.forage_S<- mod.forage_S$llk
store.b.forage_S<- mod.forage_S$b.gamma
store.betas.forage_S<- mod.forage_S$betas
#look at overall convergence
plot(store.llk.forage_S, type='l')
par(mfrow=c(1,1),mar=rep(3,4))
#look at overall convergence
plot(store.llk.forage_S, type='l')
abline(v=nburn, col='red')
plot(store.llk.forage_S[(nburn + 1):ngibbs], type='l')
acf(store.llk.forage_S[(nburn + 1):ngibbs])
plot(store.b.forage_S, type='l')
plot(store.b.forage_S[(nburn + 1):ngibbs], type='l')
acf(store.b.forage_S[(nburn + 1):ngibbs])
#look at convergence betas
par(mfrow=c(2,2))
nbetas.forage_S<- ncol(mod.forage_S$betas)
for (i in 1:nbetas.forage_S){
plot(mod.forage_S$betas[,i], type='l')
}
covars.N_masked
ifelse(covars.N_masked$lulc_N == 1, "Yes", "No")
ifelse(values(covars.N_masked$lulc_N) == 1, "Yes", "No")
betas.forage_N
table(path.N.forage$lulc)
dat.N$step %>% range()
max(dat.N$step, na.rm=T)
max(dat.S$step, na.rm=T)
View(dat.N)
max(dat.N[dat.N$dt > 180 & dat.N$dt < 420, "step"], na.rm=T)
max(dat.S[dat.N$dt > 180 & dat.N$dt < 420, "step"], na.rm=T)
max(dat.S[dat.S$dt > 180 & dat.S$dt < 420, "step"], na.rm=T)
dat.S[dat.S$step > 1000,]
ifelse(values(covars.N_masked$lulc_N) == 3, betas.forage_N["int"],
ifelse(values(covars.N_masked$lulc_N) == 1, betas.forage_N["pasture"],
ifelse(values(covars.N_masked$lulc_N) == 5, betas.forage_N["cane"],
ifelse(values(covars.N_masked$lulc_N) == 6, betas.forage_N["forest"]))))
NA+1
ifelse(values(covars.N_masked$lulc_N) == 3, betas.forage_N["int"],
ifelse(values(covars.N_masked$lulc_N) == 1, betas.forage_N["pasture"],
ifelse(values(covars.N_masked$lulc_N) == 5, betas.forage_N["cane"],
ifelse(values(covars.N_masked$lulc_N) == 6, betas.forage_N["forest"],
ifelse(!is.na(values(covars.N_masked$lulc_N)),
betas.forage_N["int"], NA)))))
#Min recorded temperature
resistSurfN.forage_minTemp<- exp(
ifelse(values(covars.N_masked$lulc_N) == 3, betas.forage_N["int"],
ifelse(values(covars.N_masked$lulc_N) == 1, betas.forage_N["pasture"],
ifelse(values(covars.N_masked$lulc_N) == 5, betas.forage_N["cane"],
ifelse(values(covars.N_masked$lulc_N) == 6, betas.forage_N["forest"],
ifelse(!is.na(values(covars.N_masked$lulc_N)),
betas.forage_N["int"], NA))))) +
betas.forage_N["slope"]*covars.N_masked$slope_N +
betas.forage_N["ndvi"]*covars.N_masked$ndvi_N +
betas.forage_N["t.ar"]*scaled_t.ar_N$min +  #for min temp
betas.forage_N["rain"]*scaled_rain_N$mean +  #for avg rainfall
betas.forage_N["spline.1"]*covars.N_masked$dist2rd_N +
betas.forage_N["spline.2"]*covars.N_masked$dist2rd_N
)
#Min recorded temperature
resistSurfN.forage_minTemp<- exp(
ifelse(values(covars.N_masked$lulc_N) == 3, betas.forage_N["int"],
ifelse(values(covars.N_masked$lulc_N) == 1, betas.forage_N["pasture"],
ifelse(values(covars.N_masked$lulc_N) == 5, betas.forage_N["cane"],
ifelse(values(covars.N_masked$lulc_N) == 6, betas.forage_N["forest"],
ifelse(!is.na(values(covars.N_masked$lulc_N)),
betas.forage_N["int"], NA))))) +
betas.forage_N["slope"]*covars.N_masked$slope_N +
betas.forage_N["t.ar"]*scaled_t.ar_N$min +  #for min temp
betas.forage_N["rain"]*scaled_rain_N$mean  #for avg rainfall
)
plot(resistSurfN.forage_minTemp)
resistSurfN.forage_minTemp.df<- as.data.frame(resistSurfN.forage_minTemp, xy=T) %>%
mutate(temp.level = "Min")
names(scaled_t.ar_N)
#Avg recorded temperature
resistSurfN.forage_avgTemp<- exp(
ifelse(values(covars.N_masked$lulc_N) == 3, betas.forage_N["int"],
ifelse(values(covars.N_masked$lulc_N) == 1, betas.forage_N["pasture"],
ifelse(values(covars.N_masked$lulc_N) == 5, betas.forage_N["cane"],
ifelse(values(covars.N_masked$lulc_N) == 6, betas.forage_N["forest"],
ifelse(!is.na(values(covars.N_masked$lulc_N)),
betas.forage_N["int"], NA))))) +
betas.forage_N["slope"]*covars.N_masked$slope_N +
betas.forage_N["t.ar"]*scaled_t.ar_N$mean +  #for avg temp
betas.forage_N["rain"]*scaled_rain_N$mean  #for avg rainfall
)
resistSurfN.forage_avgTemp.df<- as.data.frame(resistSurfN.forage_avgTemp, xy=T) %>%
mutate(temp.level = "Avg")
#Max recorded temperature
resistSurfN.forage_maxTemp<- exp(
ifelse(values(covars.N_masked$lulc_N) == 3, betas.forage_N["int"],
ifelse(values(covars.N_masked$lulc_N) == 1, betas.forage_N["pasture"],
ifelse(values(covars.N_masked$lulc_N) == 5, betas.forage_N["cane"],
ifelse(values(covars.N_masked$lulc_N) == 6, betas.forage_N["forest"],
ifelse(!is.na(values(covars.N_masked$lulc_N)),
betas.forage_N["int"], NA))))) +
betas.forage_N["slope"]*covars.N_masked$slope_N +
betas.forage_N["t.ar"]*scaled_t.ar_N$max +  #for max temp
betas.forage_N["rain"]*scaled_rain_N$mean  #for avg rainfall
)
resistSurfN.forage_maxTemp.df<- as.data.frame(resistSurfN.forage_maxTemp, xy=T) %>%
mutate(temp.level = "Max")
#Combine all results together for each level of lunar illumination
resistSurfN.forage.df<- rbind(resistSurfN.forage_minTemp.df, resistSurfN.forage_avgTemp.df,
resistSurfN.forage_maxTemp.df)
resistSurfN.forage.df$temp.level<- factor(resistSurfN.forage.df$temp.level,
levels = c("Min", "Avg", "Max"))
ggplot() +
geom_tile(data = resistSurfN.forage.df, aes(x, y, fill = layer)) +
scale_fill_viridis_c("Time Spent\nper Cell (min)", option = "inferno", na.value = "n") +
# geom_point(data = dat.N %>% filter(state == "Foraging"), aes(x, y, color = id),
#            size = 0.5, alpha = 0.2, show.legend = F) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(x="Easting", y="Northing", title = "North Pantanal Foraging Resistance Surface") +
theme_bw() +
coord_equal() +
theme(legend.position = "bottom",
axis.title = element_text(size = 18),
axis.text = element_text(size = 10),
strip.text = element_text(size = 16, face = "bold"),
plot.title = element_text(size = 22),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
guides(fill = guide_colourbar(barwidth = 30, barheight = 1)) +
facet_wrap(~ temp.level)
View(resistSurfN.forage.df)
summary(resistSurfN.forage.df)
ggplot() +
geom_tile(data = resistSurfN.forage.df, aes(x, y, fill = layer)) +
scale_fill_viridis_c("Time Spent\nper Cell (min)", option = "inferno",
na.value = "transparent") +
# geom_point(data = dat.N %>% filter(state == "Foraging"), aes(x, y, color = id),
#            size = 0.5, alpha = 0.2, show.legend = F) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(x="Easting", y="Northing", title = "North Pantanal Foraging Resistance Surface") +
theme_bw() +
coord_equal() +
theme(legend.position = "bottom",
axis.title = element_text(size = 18),
axis.text = element_text(size = 10),
strip.text = element_text(size = 16, face = "bold"),
plot.title = element_text(size = 22),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
guides(fill = guide_colourbar(barwidth = 30, barheight = 1)) +
facet_wrap(~ temp.level)
#extract beta coeffs (mean)
betas.transit_N<- colMeans(store.betas_Ntransit)
#Min recorded temperature
resistSurfN.transit_minTemp<- exp(
ifelse(values(covars.N_masked$lulc_N) == 3, betas.transit_N["int"],
ifelse(values(covars.N_masked$lulc_N) == 1, betas.transit_N["pasture"],
ifelse(values(covars.N_masked$lulc_N) == 5, betas.transit_N["cane"],
ifelse(values(covars.N_masked$lulc_N) == 6, betas.transit_N["forest"],
ifelse(!is.na(values(covars.N_masked$lulc_N)),
betas.transit_N["int"], NA))))) +
betas.transit_N["slope"]*covars.N_masked$slope_N +
betas.transit_N["t.ar"]*scaled_t.ar_N$min +  #for min temp
betas.transit_N["rain"]*scaled_rain_N$mean  #for avg rainfall
)
resistSurfN.transit_minTemp.df<- as.data.frame(resistSurfN.transit_minTemp, xy=T) %>%
mutate(temp.level = "Min")
#Min recorded temperature
resistSurfN.forage_minTemp<- exp(
ifelse(values(covars.N_masked$lulc_N) == 3, betas.forage_N["int"],
ifelse(values(covars.N_masked$lulc_N) == 1,
betas.forage_N["int"] + betas.forage_N["pasture"],
ifelse(values(covars.N_masked$lulc_N) == 5,
betas.forage_N["int"] + betas.forage_N["cane"],
ifelse(values(covars.N_masked$lulc_N) == 6,
betas.forage_N["int"] + betas.forage_N["forest"],
ifelse(!is.na(values(covars.N_masked$lulc_N)),
betas.forage_N["int"], NA))))) +
betas.forage_N["slope"]*covars.N_masked$slope_N +
betas.forage_N["t.ar"]*scaled_t.ar_N$min +  #for min temp
betas.forage_N["rain"]*scaled_rain_N$mean  #for avg rainfall
)
resistSurfN.forage_minTemp.df<- as.data.frame(resistSurfN.forage_minTemp, xy=T) %>%
mutate(temp.level = "Min")
#Avg recorded temperature
resistSurfN.forage_avgTemp<- exp(
ifelse(values(covars.N_masked$lulc_N) == 3, betas.forage_N["int"],
ifelse(values(covars.N_masked$lulc_N) == 1,
betas.forage_N["int"] + betas.forage_N["pasture"],
ifelse(values(covars.N_masked$lulc_N) == 5,
betas.forage_N["int"] + betas.forage_N["cane"],
ifelse(values(covars.N_masked$lulc_N) == 6,
betas.forage_N["int"] + betas.forage_N["forest"],
ifelse(!is.na(values(covars.N_masked$lulc_N)),
betas.forage_N["int"], NA))))) +
betas.forage_N["slope"]*covars.N_masked$slope_N +
betas.forage_N["t.ar"]*scaled_t.ar_N$mean +  #for avg temp
betas.forage_N["rain"]*scaled_rain_N$mean  #for avg rainfall
)
resistSurfN.forage_avgTemp.df<- as.data.frame(resistSurfN.forage_avgTemp, xy=T) %>%
mutate(temp.level = "Avg")
#Max recorded temperature
resistSurfN.forage_maxTemp<- exp(
ifelse(values(covars.N_masked$lulc_N) == 3, betas.forage_N["int"],
ifelse(values(covars.N_masked$lulc_N) == 1,
betas.forage_N["int"] + betas.forage_N["pasture"],
ifelse(values(covars.N_masked$lulc_N) == 5,
betas.forage_N["int"] + betas.forage_N["cane"],
ifelse(values(covars.N_masked$lulc_N) == 6,
betas.forage_N["int"] + betas.forage_N["forest"],
ifelse(!is.na(values(covars.N_masked$lulc_N)),
betas.forage_N["int"], NA))))) +
betas.forage_N["slope"]*covars.N_masked$slope_N +
betas.forage_N["t.ar"]*scaled_t.ar_N$max +  #for max temp
betas.forage_N["rain"]*scaled_rain_N$mean  #for avg rainfall
)
resistSurfN.forage_maxTemp.df<- as.data.frame(resistSurfN.forage_maxTemp, xy=T) %>%
mutate(temp.level = "Max")
#Combine all results together for each level of lunar illumination
resistSurfN.forage.df<- rbind(resistSurfN.forage_minTemp.df, resistSurfN.forage_avgTemp.df,
resistSurfN.forage_maxTemp.df)
resistSurfN.forage.df$temp.level<- factor(resistSurfN.forage.df$temp.level,
levels = c("Min", "Avg", "Max"))
ggplot() +
geom_tile(data = resistSurfN.forage.df, aes(x, y, fill = layer)) +
scale_fill_viridis_c("Time Spent\nper Cell (min)", option = "inferno",
na.value = "transparent") +
# geom_point(data = dat.N %>% filter(state == "Foraging"), aes(x, y, color = id),
#            size = 0.5, alpha = 0.2, show.legend = F) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(x="Easting", y="Northing", title = "North Pantanal Foraging Resistance Surface") +
theme_bw() +
coord_equal() +
theme(legend.position = "bottom",
axis.title = element_text(size = 18),
axis.text = element_text(size = 10),
strip.text = element_text(size = 16, face = "bold"),
plot.title = element_text(size = 22),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
guides(fill = guide_colourbar(barwidth = 30, barheight = 1)) +
facet_wrap(~ temp.level)
#Min recorded temperature
resistSurfN.transit_minTemp<- exp(
ifelse(values(covars.N_masked$lulc_N) == 3, betas.transit_N["int"],
ifelse(values(covars.N_masked$lulc_N) == 1,
betas.transit_N["int"] + betas.transit_N["pasture"],
ifelse(values(covars.N_masked$lulc_N) == 5,
betas.transit_N["int"] + betas.transit_N["cane"],
ifelse(values(covars.N_masked$lulc_N) == 6,
betas.transit_N["int"] + betas.transit_N["forest"],
ifelse(!is.na(values(covars.N_masked$lulc_N)),
betas.transit_N["int"], NA))))) +
betas.transit_N["slope"]*covars.N_masked$slope_N +
betas.transit_N["t.ar"]*scaled_t.ar_N$min +  #for min temp
betas.transit_N["rain"]*scaled_rain_N$mean  #for avg rainfall
)
resistSurfN.transit_minTemp.df<- as.data.frame(resistSurfN.transit_minTemp, xy=T) %>%
mutate(temp.level = "Min")
#Avg recorded temperature
resistSurfN.transit_avgTemp<- exp(
ifelse(values(covars.N_masked$lulc_N) == 3, betas.transit_N["int"],
ifelse(values(covars.N_masked$lulc_N) == 1,
betas.transit_N["int"] + betas.transit_N["pasture"],
ifelse(values(covars.N_masked$lulc_N) == 5,
betas.transit_N["int"] + betas.transit_N["cane"],
ifelse(values(covars.N_masked$lulc_N) == 6,
betas.transit_N["int"] + betas.transit_N["forest"],
ifelse(!is.na(values(covars.N_masked$lulc_N)),
betas.transit_N["int"], NA))))) +
betas.transit_N["slope"]*covars.N_masked$slope_N +
betas.transit_N["t.ar"]*scaled_t.ar_N$mean +  #for avg temp
betas.transit_N["rain"]*scaled_rain_N$mean  #for avg rainfall
)
resistSurfN.transit_avgTemp.df<- as.data.frame(resistSurfN.transit_avgTemp, xy=T) %>%
mutate(temp.level = "Avg")
#Max recorded temperature
resistSurfN.transit_maxTemp<- exp(
ifelse(values(covars.N_masked$lulc_N) == 3, betas.transit_N["int"],
ifelse(values(covars.N_masked$lulc_N) == 1,
betas.transit_N["int"] + betas.transit_N["pasture"],
ifelse(values(covars.N_masked$lulc_N) == 5,
betas.transit_N["int"] + betas.transit_N["cane"],
ifelse(values(covars.N_masked$lulc_N) == 6,
betas.transit_N["int"] + betas.transit_N["forest"],
ifelse(!is.na(values(covars.N_masked$lulc_N)),
betas.transit_N["int"], NA))))) +
betas.transit_N["slope"]*covars.N_masked$slope_N +
betas.transit_N["t.ar"]*scaled_t.ar_N$max +  #for max temp
betas.transit_N["rain"]*scaled_rain_N$mean  #for avg rainfall
)
resistSurfN.transit_maxTemp.df<- as.data.frame(resistSurfN.transit_maxTemp, xy=T) %>%
mutate(temp.level = "Max")
#Combine all results together for each level of lunar illumination
resistSurfN.transit.df<- rbind(resistSurfN.transit_minTemp.df, resistSurfN.transit_avgTemp.df,
resistSurfN.transit_maxTemp.df)
resistSurfN.transit.df$temp.level<- factor(resistSurfN.transit.df$temp.level,
levels = c("Min", "Avg", "Max"))
ggplot() +
geom_tile(data = resistSurfN.transit.df, aes(x, y, fill = layer)) +
scale_fill_viridis_c("Time Spent\nper Cell (min)", option = "inferno",
na.value = "transparent") +
# geom_point(data = dat.N %>% filter(state == "Transit"), aes(x, y, color = id),
#            size = 0.5, alpha = 0.2, show.legend = F) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(x="Easting", y="Northing", title = "North Pantanal Transit Resistance Surface") +
theme_bw() +
coord_equal() +
theme(legend.position = "bottom",
axis.title = element_text(size = 18),
axis.text = element_text(size = 10),
strip.text = element_text(size = 16, face = "bold"),
plot.title = element_text(size = 22),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
guides(fill = guide_colourbar(barwidth = 30, barheight = 1)) +
facet_wrap(~ temp.level)
