mutate_at(c("dist2rd","slope","ndvi","lunar"), ~scale(., center = TRUE, scale = TRUE)) %>%
mutate(dist_ndvi = dist2rd*ndvi)
path.S.transit<- path.S.transit %>%
mutate_at(c("dist2rd","slope","ndvi","lunar"), ~scale(., center = TRUE, scale = TRUE)) %>%
mutate(dist_ndvi = dist2rd*ndvi)
View(gibbs_resist)
ind<- grep(paste(c("dist2rd","slope","ndvi","lunar","dist_ndvi"), collapse="|"),
names(path.N.forage))
xmat<- data.matrix(cbind(1, path.N.forage[,ind]))
#reformat seg.id so it is consecutive and numeric
path.N.forage$seg.id<- factor(path.N.forage$seg.id)
levels(path.N.forage$seg.id)<- 1:length(unique(path.N.forage$seg.id))
path.N.forage$seg.id<- as.numeric(path.N.forage$seg.id)
#check seg.id
seg.id<- path.N.forage$seg.id
k<- unique(seg.id)
unique(k-c(1:max(k))) #should be 0
#get y soma
tmp<- unique(path.N.forage[,c('seg.id','dt')])
ysoma<- tmp %>%
tidyr::drop_na() %>%
dplyr::pull(dt)
#model args
ngibbs<- 1000
#model args
ngibbs<- 2000
nburn<- ngibbs/2
w<- 0.1
MaxIter<- 100
#priors
var.betas<- c(100,rep(10,ncol(xmat)-1))
#W/o interaction term
set.seed(2)
mod.forage_N1<- gibbs_resist(ysoma = ysoma, xmat = xmat[,1:5], seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas[1:5],
w = w, MaxIter = MaxtIter)
View(print.adapt)
source('gibbs_resist_func.R')
#W/ interaction term
set.seed(2)
mod.forage_N2<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
w = w, MaxIter = MaxtIter)
ind<- grep(paste(c("dist2rd","slope","ndvi","lunar","dist_ndvi"), collapse="|"),
names(path.N.transit))
xmat<- data.matrix(cbind(1, path.N.transit[,ind]))
#reformat seg.id so it is consecutive and numeric
path.N.transit$seg.id<- factor(path.N.transit$seg.id)
levels(path.N.transit$seg.id)<- 1:length(unique(path.N.transit$seg.id))
path.N.transit$seg.id<- as.numeric(path.N.transit$seg.id)
#check seg.id
seg.id<- path.N.transit$seg.id
k<- unique(seg.id)
unique(k-c(1:max(k))) #should be 0
#get y soma
tmp<- unique(path.N.transit[,c('seg.id','dt')])
ysoma<- tmp %>%
tidyr::drop_na() %>%
dplyr::pull(dt)
#model args
ngibbs<- 2000
nburn<- ngibbs/2
w<- 0.1
MaxIter<- 100
#priors
var.betas<- c(100,rep(10,ncol(xmat)-1))
#W/o interaction term
set.seed(2)
mod.transit_N1<- gibbs_resist(ysoma = ysoma, xmat = xmat[,1:5], seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas[1:5],
w = w, MaxIter = MaxtIter)
#W/ interaction term
set.seed(2)
mod.transit_N2<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
w = w, MaxIter = MaxtIter)
ind<- grep(paste(c("dist2rd","slope","ndvi","lunar","dist_ndvi"), collapse="|"),
names(path.S.forage))
xmat<- data.matrix(cbind(1, path.S.forage[,ind]))
#reformat seg.id so it is consecutive and numeric
path.S.forage$seg.id<- factor(path.S.forage$seg.id)
levels(path.S.forage$seg.id)<- 1:length(unique(path.S.forage$seg.id))
path.S.forage$seg.id<- as.numeric(path.S.forage$seg.id)
#check seg.id
seg.id<- path.S.forage$seg.id
k<- unique(seg.id)
unique(k-c(1:max(k))) #should be 0
#get y soma
tmp<- unique(path.S.forage[,c('seg.id','dt')])
ysoma<- tmp %>%
tidyr::drop_na() %>%
dplyr::pull(dt)
#model args
ngibbs<- 1000
#model args
ngibbs<- 2000
nburn<- ngibbs/2
w<- 0.1
MaxIter<- 100
#priors
var.betas<- c(100,rep(10,ncol(xmat)-1))
#W/o interaction term
set.seed(2)
mod.forage_S1<- gibbs_resist(ysoma = ysoma, xmat = xmat[,1:5], seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas[1:5],
w = w, MaxIter = MaxtIter)
#W/ interaction term
set.seed(2)
mod.forage_S2<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
w = w, MaxIter = MaxtIter)
ind<- grep(paste(c("dist2rd","slope","ndvi","lunar","dist_ndvi"), collapse="|"),
names(path.S.transit))
xmat<- data.matrix(cbind(1, path.S.transit[,ind]))
#reformat seg.id so it is consecutive and numeric
path.S.transit$seg.id<- factor(path.S.transit$seg.id)
levels(path.S.transit$seg.id)<- 1:length(unique(path.S.transit$seg.id))
path.S.transit$seg.id<- as.numeric(path.S.transit$seg.id)
#check seg.id
seg.id<- path.S.transit$seg.id
k<- unique(seg.id)
unique(k-c(1:max(k))) #should be 0
#get y soma
tmp<- unique(path.S.transit[,c('seg.id','dt')])
ysoma<- tmp %>%
tidyr::drop_na() %>%
dplyr::pull(dt)
#model args
ngibbs<- 2000
nburn<- ngibbs/2
w<- 0.1
MaxIter<- 100
#priors
var.betas<- c(100,rep(10,ncol(xmat)-1))
#W/o interaction term
set.seed(2)
mod.transit_S1<- gibbs_resist(ysoma = ysoma, xmat = xmat[,1:5], seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas[1:5],
w = w, MaxIter = MaxtIter)
#W/ interaction term
set.seed(1)
mod.transit_S2<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
w = w, MaxIter = MaxtIter)
#W/o interaction term
store.llk_N1<- mod.forage_N1$llk
store.b_N1<- mod.forage_N1$b.gamma
store.betas_N1<- mod.forage_N1$betas
#look at overall convergence
plot(store.llk_N1, type='l')
nburn=500
abline(v=nburn, col='red')
nburn<- ngibbs/2
#look at overall convergence
plot(store.llk_N1, type='l')
abline(v=nburn, col='red')
plot(store.llk_N1[(nburn + 1):ngibbs], type='l')
acf(store.llk_N1[(nburn + 1):ngibbs])
plot(store.b_N1, type='l')
plot(store.b_N1[(nburn + 1):ngibbs], type='l')
acf(store.b_N1[(nburn + 1):ngibbs])
#look at convergence betas
par(mfrow=c(2,2))
nbetas_N1<- ncol(mod.forage_N1$betas)
for (i in 1:nbetas_N1){
plot(mod.forage_N1$betas[,i], type='l')
}
for (i in 1:nbetas_N1){
plot(mod.forage_N1$betas[(nburn + 1):ngibbs, i], type='l')
}
par(mfrow=c(1,1),mar=rep(3,4))
#W/ interaction term
store.llk_N2<- mod.forage_N2$llk
store.b_N2<- mod.forage_N2$b.gamma
store.betas_N2<- mod.forage_N2$betas
#look at overall convergence
plot(store.llk_N2, type='l')
abline(v=nburn, col='red')
plot(store.llk_N2[(nburn + 1):ngibbs], type='l')
acf(store.llk_N2[(nburn + 1):ngibbs])
plot(store.b_N2, type='l')
plot(store.b_N2[(nburn + 1):ngibbs], type='l')
acf(store.b_N2[(nburn + 1):ngibbs])
#look at convergence betas
par(mfrow=c(2,2))
nbetas_N2<- ncol(mod.forage_N2$betas)
for (i in 1:nbetas_N2){
plot(mod.forage_N2$betas[,i], type='l')
}
for (i in 1:nbetas_N2){
plot(mod.forage_N2$betas[(nburn + 1):ngibbs, i], type='l')
}
par(mfrow=c(1,1),mar=rep(3,4))
AIC_mcmc = function(llk, npar) {
(-2 * llk) + (2*npar)
}
AIC_N_NoInt<- AIC_mcmc(llk = mean(store.llk_N1[(nburn+1):ngibbs,]), npar = 6)
AIC_N_Int<- AIC_mcmc(llk = mean(store.llk_N2[(nburn+1):ngibbs,]), npar = 7)
AIC_N_NoInt - AIC_N_Int  #model 1 (w/o interaction) is much better
#W/o interaction term
store.llk_N1<- mod.transit_N1$llk
store.b_N1<- mod.transit_N1$b.gamma
store.betas_N1<- mod.transit_N1$betas
#look at overall convergence
plot(store.llk_N1, type='l')
abline(v=nburn, col='red')
plot(store.llk_N1[(nburn + 1):ngibbs], type='l')
acf(store.llk_N1[(nburn + 1):ngibbs])
plot(store.b_N1, type='l')
plot(store.b_N1[(nburn + 1):ngibbs], type='l')
acf(store.b_N1[(nburn + 1):ngibbs])
#look at convergence betas
par(mfrow=c(2,2))
nbetas_N1<- ncol(mod.transit_N1$betas)
for (i in 1:nbetas_N1){
plot(mod.transit_N1$betas[,i], type='l')
}
for (i in 1:nbetas_N1){
plot(mod.transit_N1$betas[(nburn + 1):ngibbs, i], type='l')
}
par(mfrow=c(1,1),mar=rep(3,4))
#W/ interaction term
store.llk_N2<- mod.transit_N2$llk
store.b_N2<- mod.transit_N2$b.gamma
store.betas_N2<- mod.transit_N2$betas
#look at overall convergence
plot(store.llk_N2, type='l')
abline(v=nburn, col='red')
plot(store.llk_N2[(nburn + 1):ngibbs], type='l')
acf(store.llk_N2[(nburn + 1):ngibbs])
plot(store.b_N2, type='l')
plot(store.b_N2[(nburn + 1):ngibbs], type='l')
acf(store.b_N2[(nburn + 1):ngibbs])
#look at convergence betas
par(mfrow=c(2,2))
nbetas_N2<- ncol(mod.transit_N2$betas)
for (i in 1:nbetas_N2){
plot(mod.transit_N2$betas[,i], type='l')
}
#W/ interaction term
set.seed(1)
mod.transit_N2<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
w = w, MaxIter = MaxtIter)
#W/ interaction term
store.llk_N2<- mod.transit_N2$llk
store.b_N2<- mod.transit_N2$b.gamma
store.betas_N2<- mod.transit_N2$betas
#look at overall convergence
plot(store.llk_N2, type='l')
#W/ interaction term
set.seed(3)
mod.transit_N2<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
w = w, MaxIter = MaxtIter)
ind<- grep(paste(c("dist2rd","slope","ndvi","lunar","dist_ndvi"), collapse="|"),
names(path.N.transit))
xmat<- data.matrix(cbind(1, path.N.transit[,ind]))
#reformat seg.id so it is consecutive and numeric
path.N.transit$seg.id<- factor(path.N.transit$seg.id)
levels(path.N.transit$seg.id)<- 1:length(unique(path.N.transit$seg.id))
path.N.transit$seg.id<- as.numeric(path.N.transit$seg.id)
#check seg.id
seg.id<- path.N.transit$seg.id
k<- unique(seg.id)
unique(k-c(1:max(k))) #should be 0
#get y soma
tmp<- unique(path.N.transit[,c('seg.id','dt')])
ysoma<- tmp %>%
tidyr::drop_na() %>%
dplyr::pull(dt)
#model args
ngibbs<- 2000
nburn<- ngibbs/2
w<- 0.1
MaxIter<- 100
#priors
var.betas<- c(100,rep(10,ncol(xmat)-1))
#W/ interaction term
set.seed(3)
mod.transit_N2<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
w = w, MaxIter = MaxtIter)
#W/ interaction term
store.llk_N2<- mod.transit_N2$llk
store.b_N2<- mod.transit_N2$b.gamma
store.betas_N2<- mod.transit_N2$betas
#look at overall convergence
plot(store.llk_N2, type='l')
par(mfrow=c(1,1),mar=rep(3,4))
#look at overall convergence
plot(store.llk_N2, type='l')
abline(v=nburn, col='red')
plot(store.llk_N2[(nburn + 1):ngibbs], type='l')
acf(store.llk_N2[(nburn + 1):ngibbs])
plot(store.b_N2, type='l')
plot(store.b_N2[(nburn + 1):ngibbs], type='l')
acf(store.b_N2[(nburn + 1):ngibbs])
#look at convergence betas
par(mfrow=c(2,2))
nbetas_N2<- ncol(mod.transit_N2$betas)
for (i in 1:nbetas_N2){
plot(mod.transit_N2$betas[,i], type='l')
}
#W/ interaction term
set.seed(1)
mod.transit_N2<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
w = w, MaxIter = MaxtIter)
#W/ interaction term
set.seed(4)
mod.transit_N2<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
w = w, MaxIter = MaxtIter)
par(mfrow=c(1,1),mar=rep(3,4))
#W/ interaction term
store.llk_N2<- mod.transit_N2$llk
store.b_N2<- mod.transit_N2$b.gamma
store.betas_N2<- mod.transit_N2$betas
#look at overall convergence
plot(store.llk_N2, type='l')
abline(v=nburn, col='red')
plot(store.llk_N2[(nburn + 1):ngibbs], type='l')
acf(store.llk_N2[(nburn + 1):ngibbs])
plot(store.b_N2, type='l')
plot(store.b_N2[(nburn + 1):ngibbs], type='l')
acf(store.b_N2[(nburn + 1):ngibbs])
#look at convergence betas
par(mfrow=c(2,2))
nbetas_N2<- ncol(mod.transit_N2$betas)
for (i in 1:nbetas_N2){
plot(mod.transit_N2$betas[,i], type='l')
}
for (i in 1:nbetas_N2){
plot(mod.transit_N2$betas[(nburn + 1):ngibbs, i], type='l')
}
par(mfrow=c(1,1),mar=rep(3,4))
AIC_N_NoInt<- AIC_mcmc(llk = mean(store.llk_N1[(nburn+1):ngibbs,]), npar = 6)
AIC_N_Int<- AIC_mcmc(llk = mean(store.llk_N2[(nburn+1):ngibbs,]), npar = 7)
AIC_N_NoInt - AIC_N_Int  #model 1 (w/o interaction) is much better
#W/o interaction term
store.llk_S1<- mod.forage_S1$llk
store.b_S1<- mod.forage_S1$b.gamma
store.betas_S1<- mod.forage_S1$betas
#look at overall convergence
plot(store.llk_S1, type='l')
abline(v=nburn, col='red')
plot(store.llk_S1[(nburn + 1):ngibbs], type='l')
acf(store.llk_S1[(nburn + 1):ngibbs])
plot(store.b_S1, type='l')
plot(store.b_S1[(nburn + 1):ngibbs], type='l')
acf(store.b_S1[(nburn + 1):ngibbs])
#look at convergence betas
par(mfrow=c(2,2))
nbetas_S1<- ncol(mod.forage_S1$betas)
for (i in 1:nbetas_S1){
plot(mod.forage_S1$betas[,i], type='l')
}
for (i in 1:nbetas_S1){
plot(mod.forage_S1$betas[(nburn + 1):ngibbs, i], type='l')
}
par(mfrow=c(1,1),mar=rep(3,4))
#W/ interaction term
store.llk_S2<- mod.forage_S2$llk
store.b_S2<- mod.forage_S2$b.gamma
store.betas_S2<- mod.forage_S2$betas
#look at overall convergence
plot(store.llk_S2, type='l')
abline(v=nburn, col='red')
plot(store.llk_S2[(nburn + 1):ngibbs], type='l')
acf(store.llk_S2[(nburn + 1):ngibbs])
plot(store.b_S2, type='l')
plot(store.b_S2[(nburn + 1):ngibbs], type='l')
acf(store.b_S2[(nburn + 1):ngibbs])
#look at convergence betas
par(mfrow=c(2,2))
nbetas_S2<- ncol(mod.forage_S2$betas)
for (i in 1:nbetas_S2){
plot(mod.forage_S2$betas[,i], type='l')
}
ind<- grep(paste(c("dist2rd","slope","ndvi","lunar","dist_ndvi"), collapse="|"),
names(path.S.forage))
xmat<- data.matrix(cbind(1, path.S.forage[,ind]))
#reformat seg.id so it is consecutive and numeric
path.S.forage$seg.id<- factor(path.S.forage$seg.id)
levels(path.S.forage$seg.id)<- 1:length(unique(path.S.forage$seg.id))
path.S.forage$seg.id<- as.numeric(path.S.forage$seg.id)
#check seg.id
seg.id<- path.S.forage$seg.id
k<- unique(seg.id)
unique(k-c(1:max(k))) #should be 0
#get y soma
tmp<- unique(path.S.forage[,c('seg.id','dt')])
ysoma<- tmp %>%
tidyr::drop_na() %>%
dplyr::pull(dt)
#model args
ngibbs<- 2000
nburn<- ngibbs/2
w<- 0.1
MaxIter<- 100
#priors
var.betas<- c(100,rep(10,ncol(xmat)-1))
#W/ interaction term
set.seed(3)
mod.forage_S2<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
w = w, MaxIter = MaxtIter)
#W/ interaction term
store.llk_S2<- mod.forage_S2$llk
store.b_S2<- mod.forage_S2$b.gamma
store.betas_S2<- mod.forage_S2$betas
#look at overall convergence
plot(store.llk_S2, type='l')
par(mfrow=c(1,1),mar=rep(3,4))
#look at overall convergence
plot(store.llk_S2, type='l')
abline(v=nburn, col='red')
plot(store.llk_S2[(nburn + 1):ngibbs], type='l')
acf(store.llk_S2[(nburn + 1):ngibbs])
plot(store.b_S2, type='l')
plot(store.b_S2[(nburn + 1):ngibbs], type='l')
acf(store.b_S2[(nburn + 1):ngibbs])
#look at convergence betas
par(mfrow=c(2,2))
nbetas_S2<- ncol(mod.forage_S2$betas)
for (i in 1:nbetas_S2){
plot(mod.forage_S2$betas[,i], type='l')
}
for (i in 1:nbetas_S2){
plot(mod.forage_S2$betas[(nburn + 1):ngibbs, i], type='l')
}
par(mfrow=c(1,1),mar=rep(3,4))
AIC_S_NoInt<- AIC_mcmc(llk = mean(store.llk_S1[(nburn+1):ngibbs,]), npar = 6)
AIC_S_Int<- AIC_mcmc(llk = mean(store.llk_S2[(nburn+1):ngibbs,]), npar = 7)
AIC_S_NoInt - AIC_S_Int  #model 1 (w/o interaction) is much better
#W/o interaction term
store.llk_S1<- mod.transit_S1$llk
store.b_S1<- mod.transit_S1$b.gamma
store.betas_S1<- mod.transit_S1$betas
#look at overall convergence
plot(store.llk_S1, type='l')
abline(v=nburn, col='red')
plot(store.llk_S1[(nburn + 1):ngibbs], type='l')
acf(store.llk_S1[(nburn + 1):ngibbs])
plot(store.b_S1, type='l')
plot(store.b_S1[(nburn + 1):ngibbs], type='l')
acf(store.b_S1[(nburn + 1):ngibbs])
#look at convergence betas
par(mfrow=c(2,2))
nbetas_S1<- ncol(mod.transit_S1$betas)
for (i in 1:nbetas_S1){
plot(mod.transit_S1$betas[,i], type='l')
}
for (i in 1:nbetas_S1){
plot(mod.transit_S1$betas[(nburn + 1):ngibbs, i], type='l')
}
par(mfrow=c(1,1),mar=rep(3,4))
#W/ interaction term
store.llk_S2<- mod.transit_S2$llk
store.b_S2<- mod.transit_S2$b.gamma
store.betas_S2<- mod.transit_S2$betas
#look at overall convergence
plot(store.llk_S2, type='l')
abline(v=nburn, col='red')
plot(store.llk_S2[(nburn + 1):ngibbs], type='l')
acf(store.llk_S2[(nburn + 1):ngibbs])
plot(store.b_S2, type='l')
plot(store.b_S2[(nburn + 1):ngibbs], type='l')
acf(store.b_S2[(nburn + 1):ngibbs])
#look at convergence betas
par(mfrow=c(2,2))
nbetas_S2<- ncol(mod.transit_S2$betas)
for (i in 1:nbetas_S2){
plot(mod.transit_S2$betas[,i], type='l')
}
for (i in 1:nbetas_S2){
plot(mod.transit_S2$betas[(nburn + 1):ngibbs, i], type='l')
}
par(mfrow=c(1,1),mar=rep(3,4))
AIC_S_NoInt<- AIC_mcmc(llk = mean(store.llk_S1[(nburn+1):ngibbs,]), npar = 6)
AIC_S_Int<- AIC_mcmc(llk = mean(store.llk_S2[(nburn+1):ngibbs,]), npar = 7)
AIC_S_NoInt - AIC_S_Int  #model 1 (w/o interaction) is much better
library(Rcpp)
library(mvtnorm)
library(dplyr)
library(ggplot2)
library(tictoc)
source('gibbs_resist.R')
source('gibbs_resist_func.R')
source('slice_b_gamma.R')
sourceCpp('resist_aux.cpp')
# N and S IDs separated
path.N<- read.csv('N Armadillo Resistance Data.csv', as.is=T)
path.S<- read.csv('S Armadillo Resistance Data.csv', as.is=T)
path.N.forage<- path.N %>%
filter(state == "Foraging")
path.N.transit<- path.N %>%
filter(state == "Transit")
write.csv(path.N.forage, "Armadillo Foraging North.csv", row.names = F)
# N and S IDs separated
path.N<- read.csv('N Armadillo Resistance Data.csv', as.is=T)
## Filter data by behavior (foraging or transit)
path.N.forage<- path.N %>%
filter(state == "Foraging")
path.N.transit<- path.N %>%
filter(state == "Transit")
library(dplyr)
path.N.transit<- path.N %>%
filter(state == "Transit")
View(path.N.transit)
write.csv(path.N.transit, "Armadillo Transit North.csv", row.names = F)
