betas["spline.4"]*evi.s2[[i]]
)
}
unique(dat$month)
unique(dat.em$month)
evi.s2
evi.s2<- evi.s[[which(names(evi.s) %in% unique(dat.em$month))]]
evi.s2
for (i in 1:length(unique(dat.em$month))) {
resistSurf[[i]]<- exp(
ifelse(i == 1, 0, betas[i-1]) +
betas["spline.1"]*evi.s2[[i]] +
betas["spline.2"]*evi.s2[[i]] +
betas["spline.3"]*evi.s2[[i]] +
betas["spline.4"]*evi.s2[[i]]
)
}
##Perform raster math using beta coeffs
resistSurf<- list()
for (i in 1:length(unique(dat.em$month))) {
resistSurf[[i]]<- exp(
ifelse(i == 1, 0, betas[i-1]) +
betas["spline.1"]*evi.s2[[i]] +
betas["spline.2"]*evi.s2[[i]] +
betas["spline.3"]*evi.s2[[i]] +
betas["spline.4"]*evi.s2[[i]]
)
}
resistSurf<- stack(resistSurf)
names(resistSurf)<- names(evi.s2)
resistSurf
plot(resistSurf)
resistSurf.df<- as.data.frame(resistSurf, xy=T) %>%
pivot_longer(cols = -c(x,y), names_to = "month", values_to = "time")
# mutate(month = rep(month.abb[c(5:12,1)], each = ncell(ndwi$May)))
resistSurf.df$month<- factor(resistSurf.df$month, levels = names(evi.s2))
## Map predictive surfaces
ggplot() +
geom_tile(data = resistSurf.df, aes(x, y, fill = time)) +
scale_fill_viridis_c("Time Spent\nper Cell (min)", option = "inferno",
na.value = "transparent", limits = c(0,10)) +
geom_point(data = dat.em, aes(x, y),
size = 0.5, alpha = 0.5, show.legend = F, color = "chartreuse") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(x="Easting", y="Northing") +
theme_bw() +
coord_equal() +
theme(legend.position = "bottom",
axis.title = element_text(size = 18),
axis.text = element_text(size = 10),
strip.text = element_text(size = 16, face = "bold"),
plot.title = element_text(size = 22),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
guides(fill = guide_colourbar(barwidth = 30, barheight = 1)) +
facet_wrap(~ month)
View(dat.em)
setwd("~/Documents/Snail Kite Project/Data/R Scripts/ValleLabUF/resist")
path<- read.csv("Emanuel Resistance Data.csv", as.is = T)
path$dt<- path$dt/60  #convert to min from sec
path$month<- month.abb[month(path$date)]
path$month<- factor(path$month, levels = month.abb[c(5:12,1)])
# Filter data for only steps with 6 >= dt >= 8 min
cond<- path[path$dt >= 6 & path$dt <= 8 & !is.na(path$dt), "seg.id"]
path<- path[path$seg.id %in% cond,]
View(path)
max(path$evi)
min(path$evi)
plot(evi.s)
evi.s<- crop(evi.s, extent(dat.em %>%
summarize(xmin = min(x) - 3000,
xmax = max(x) + 3000,
ymin = min(y) - 3000,
ymax = max(y) + 3000) %>%
unlist()))
evi.s[getValues(evi.s) > max(path$evi) | getValues(evi.s) < min(path$evi)]<- NA  #mask pixels where values are outside of accepted range
plot(evi.s)
##Perform raster math using beta coeffs
resistSurf<- list()
evi.s2<- evi.s[[which(names(evi.s) %in% unique(dat.em$month))]]
for (i in 1:length(unique(dat.em$month))) {
resistSurf[[i]]<- exp(
ifelse(i == 1, 0, betas[i-1]) +
betas["spline.1"]*evi.s2[[i]] +
betas["spline.2"]*evi.s2[[i]] +
betas["spline.3"]*evi.s2[[i]] +
betas["spline.4"]*evi.s2[[i]]
)
}
resistSurf<- stack(resistSurf)
names(resistSurf)<- names(evi.s2)
resistSurf
range(path$evi)
i=2
ifelse(i == 1, 0, betas[i-1])
ifelse(i == 1, 0, betas[i-1]) +
betas["spline.1"]*evi.s2[[i]] +
betas["spline.2"]*evi.s2[[i]] +
betas["spline.3"]*evi.s2[[i]] +
betas["spline.4"]*evi.s2[[i]]
exp(
ifelse(i == 1, 0, betas[i-1]) +
betas["spline.1"]*evi.s2[[i]] +
betas["spline.2"]*evi.s2[[i]] +
betas["spline.3"]*evi.s2[[i]] +
betas["spline.4"]*evi.s2[[i]]
)
evi.s2
betas
length(unique(dat.em$month))
i=1
ifelse(i == 1, 0, betas[i-1])
betas["spline.1"]*evi.s2[[i]]
ifelse(i == 1, 0, betas[i-1]) +
betas["spline.1"]*evi.s2[[i]] +
betas["spline.2"]*evi.s2[[i]] +
betas["spline.3"]*evi.s2[[i]] +
betas["spline.4"]*evi.s2[[i]]
betas
evi.s2
plot(evi.s2)
colMeans(store.betas)
ncell(evi.s2)
unique(dat.em$month)
month.dumm<- factor(rep(unique(dat.em$month), each = ncell(evi.s2)), levels = unique(dat.em$month))
month.dumm<- model.matrix(~month.dumm + 0)
View(month.dumm)
design.mat<- cbind(month.dumm, getValues(evi.s2))
dim(month.dumm)
length(getValues(evi.s2))
View(month.dumm)
getValues(evi.s2)
design.mat<- cbind(month.dumm, getValues(evi.s2))
design.mat<- cbind(month.dumm, getValues(evi.s2), getValues(evi.s2), getValues(evi.s2), getValues(evi.s2))
class(month.dumm)
month.dumm<- factor(rep(unique(dat.em$month), each = ncell(evi.s2)), levels = unique(dat.em$month))
month.dumm<- matrix(model.matrix(~month.dumm + 0))
class(month.dumm)
design.mat<- cbind(month.dumm, getValues(evi.s2))
month.dumm<- factor(rep(unique(dat.em$month), each = ncell(evi.s2)), levels = unique(dat.em$month))
month.dumm<- data.frame(model.matrix(~month.dumm + 0))
design.mat<- cbind(month.dumm, getValues(evi.s2))
design.mat<- cbind(month.dumm, getValues(evi.s2), getValues(evi.s2), getValues(evi.s2),
getValues(evi.s2))
View(design.mat)
month.dumm<- factor(rep(unique(dat.em$month), each = ncell(evi.s2)), levels = unique(dat.em$month))
month.dumm<- model.matrix(~month.dumm + 0)
design.mat<- cbind(month.dumm, raster::values(evi.s2))
evi.s2
design.mat<- cbind(month.dumm, unlist(getValues(evi.s2)))
unlist(getValues(evi.s2))
as.vector(getValues(evi.s2))
design.mat<- cbind(month.dumm, as.vector(getValues(evi.s2)))
evi.vals<- as.vector(getValues(evi.s2))
design.mat<- cbind(month.dumm, evi.vals, evi.vals, evi.vals, evi.vals)
View(design.mat)
betas
dim(design.mat)
c(0, betas)
resistVals<- exp(design.mat %*% c(0, betas))
resistSurf<- evi.s2
dim(resistVals)
resistVals<- unlist(exp(design.mat %*% c(0, betas)))
resistVals<- as.vector(exp(design.mat %*% c(0, betas)))
resistSurf<- evi.s2
values(resistSurf)<- resistVals
names(resistSurf)
resistSurf
plot(resistSurf)
for (i in 1:length(unique(dat.em$month))) {
resistSurf[[i]]<- exp(
ifelse(i == 1, 0, betas[i-1]) +
betas["spline.1"]*evi.s2[[i]] +
betas["spline.2"]*evi.s2[[i]] +
betas["spline.3"]*evi.s2[[i]] +
betas["spline.4"]*evi.s2[[i]]
)
}
##Perform raster math using beta coeffs
resistSurf<- list()
for (i in 1:length(unique(dat.em$month))) {
resistSurf[[i]]<- exp(
ifelse(i == 1, 0, betas[i-1]) +
betas["spline.1"]*evi.s2[[i]] +
betas["spline.2"]*evi.s2[[i]] +
betas["spline.3"]*evi.s2[[i]] +
betas["spline.4"]*evi.s2[[i]]
)
}
resistSurf<- stack(resistSurf)
names(resistSurf)<- names(evi.s2)
resistSurf
evi.s2
## EVI
#Generate sequence along EVI
rango1<- range(path$evi)
seq.evi<- seq(rango1[1], rango1[2], length.out = 100)
#Run splines on standardized sequence
knot.locs<- seq(rango1[1], rango1[2], length.out = 4)[2:3]
#Create design matrix
month1<- rep(unique(month(path$date)), each = 100)
month1<- factor(month1, levels = unique(month1))
month.dumm<- model.matrix(~month1 + 0)
spline.evi<- bs(seq.evi, degree=2, intercept = FALSE, knots = knot.locs)
library(splines)
spline.evi<- bs(seq.evi, degree=2, intercept = FALSE, knots = knot.locs)
spline.evi<- do.call(rbind, replicate(5, spline.evi, simplify=FALSE))
design.mat<- cbind(month.dumm, spline.evi)
store.betas.mcmc<- coda::as.mcmc(store.betas)
betas<- as.data.frame(coda::HPDinterval(store.betas.mcmc))
betas$mean<- colMeans(store.betas.mcmc)
View(betas)
rbind(0,betas)
head(design.mat)
betas<- rbind(0,betas)
y.mu<- exp(design.mat %*% betas$mean)
y.low<- exp(design.mat %*% betas$lower)
y.up<- exp(design.mat %*% betas$upper)
# Add results to data frame
y.mu.df<- data.frame(x = seq.evi,
y = y.mu,
ymin = y.low,
ymax = y.up,
month = month.abb[as.numeric(as.character(month1))]
)
y.mu.df$month<- factor(y.mu.df$month, levels = unique(y.mu.df$month))
# Plot relationship
ggplot(data = y.mu.df) +
geom_ribbon(aes(x=x, ymin=ymin, ymax=ymax, fill = month), alpha =  0.3) +
scale_fill_viridis_d(guide = F) +
geom_line(aes(x, y), size = 1) +
geom_point(data = path, aes(x = evi, y = 1), alpha = 0) +
geom_rug(data = path, aes(x = evi)) +
labs(x = "\nStandardized EVI", y = "Time Spent per Cell (min)\n") +
theme_bw() +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12, face = "bold")) +
facet_wrap(~month)
head(design.mat)
betas
month.dumm<- factor(rep(unique(dat.em$month), each = ncell(evi.s2)), levels = unique(dat.em$month))
month.dumm<- model.matrix(~month.dumm + 0)
evi.vals<- as.vector(getValues(evi.s2))
design.mat<- cbind(month.dumm, evi.vals, evi.vals, evi.vals, evi.vals)
head(design.mat)
evi.s2
##Perform raster math using beta coeffs
resistSurf<- list()
for (i in 1:length(unique(dat.em$month))) {
resistSurf[[i]]<- exp(
ifelse(i == 1, 0, betas[i-1]) +
betas["spline.1"]*evi.s2[[i]] +
betas["spline.2"]*evi.s2[[i]] +
betas["spline.3"]*evi.s2[[i]] +
betas["spline.4"]*evi.s2[[i]]
)
}
#extract beta coeffs (mean)
betas<- colMeans(store.betas)
resistSurf[[i]]<- exp(
ifelse(i == 1, 0, betas[i-1]) +
betas["spline.1"]*evi.s2[[i]] +
betas["spline.2"]*evi.s2[[i]] +
betas["spline.3"]*evi.s2[[i]] +
betas["spline.4"]*evi.s2[[i]]
)
map(resistSurf, range)
View(resistSurf)
##Perform raster math using beta coeffs
resistSurf<- list()
for (i in 1:length(unique(dat.em$month))) {
resistSurf[[i]]<- exp(
ifelse(i == 1, 0, betas[i-1]) +
betas["spline.1"]*evi.s2[[i]] +
betas["spline.2"]*evi.s2[[i]] +
betas["spline.3"]*evi.s2[[i]] +
betas["spline.4"]*evi.s2[[i]]
)
}
map(resistSurf, range)
View(resistSurf)
map(resistSurf, function(x) range(values(x)))
resistSurf<- stack(resistSurf)
resistSurf
ifelse(i == 1, 0, betas[i-1]) +
betas["spline.1"]*2 +
betas["spline.2"]*2 +
betas["spline.3"]*2 +
betas["spline.4"]*2
exp(2.344)
betas
#Create design matrix
month1<- rep(unique(month(path$date)), each = 100)
month1<- factor(month1, levels = unique(month1))
month.dumm<- model.matrix(~month1 + 0)
View(month.dumm)
design.mat<- cbind(month.dumm[,-1], spline.evi)
View(design.mat)
rango1<- range(path$evi)
#Run splines on standardized sequence
knot.locs<- seq(rango1[1], rango1[2], length.out = 4)[2:3]
spline.evi<- bs(evi.s, degree=2, intercept = FALSE, knots = knot.locs)
spline.evi<- bs(values(evi.s), degree=2, intercept = FALSE, knots = knot.locs)
dim(spline.evi)
head(spline.evi)
spline.evi<- bs(values(evi.s2), degree=2, intercept = FALSE, knots = knot.locs)
dim(spline.evi)
month.dumm<- factor(rep(unique(dat.em$month), each = ncell(evi.s2)), levels = unique(dat.em$month))
month.dumm<- model.matrix(~month.dumm + 0)
View(month.dumm)
design.mat<- cbind(month.dumm[,-1], spline.evi)
betas
resistVals<- as.vector(exp(design.mat %*% betas))
resistSurf<- evi.s2
values(resistSurf)<- resistVals
resistSurf
plot(resistSurf)
evi<- brick('GiantArm_evi_monthly.grd')
evi<- crop(evi, extent(dat %>%
summarize(xmin = min(x) - 3000,
xmax = max(x) + 3000,
ymin = min(y) - 3000,
ymax = max(y) + 3000) %>%
unlist()))
evi[getValues(evi) > 1 | getValues(evi) < -1]<- NA  #mask pixels where values are outside of accepted range
evi.s<- scale(evi)
evi.s<- crop(evi.s, extent(dat.em %>%
summarize(xmin = min(x) - 3000,
xmax = max(x) + 3000,
ymin = min(y) - 3000,
ymax = max(y) + 3000) %>%
unlist()))
evi.s2<- evi.s[[which(names(evi.s) %in% unique(dat.em$month))]]
#Run splines on standardized sequence
rango1<- range(path$evi)
knot.locs<- seq(rango1[1], rango1[2], length.out = 4)[2:3]
spline.evi<- bs(values(evi.s2), degree=2, intercept = FALSE, knots = knot.locs)
month.dumm<- factor(rep(unique(dat.em$month), each = ncell(evi.s2)), levels = unique(dat.em$month))
month.dumm<- model.matrix(~month.dumm + 0)
design.mat<- cbind(month.dumm[,-1], spline.evi)
resistVals<- as.vector(exp(design.mat %*% betas))
resistSurf<- evi.s2
values(resistSurf)<- resistVals
plot(resistSurf)
resistSurf.df<- as.data.frame(resistSurf, xy=T) %>%
pivot_longer(cols = -c(x,y), names_to = "month", values_to = "time")
resistSurf.df$month<- factor(resistSurf.df$month, levels = names(evi.s2))
## Map predictive surfaces
ggplot() +
geom_tile(data = resistSurf.df, aes(x, y, fill = time)) +
scale_fill_viridis_c("Time Spent\nper Cell (min)", option = "inferno",
na.value = "transparent", limits = c(0,10)) +
geom_point(data = dat.em, aes(x, y),
size = 0.5, alpha = 0.5, show.legend = F, color = "chartreuse") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(x="Easting", y="Northing") +
theme_bw() +
coord_equal() +
theme(legend.position = "bottom",
axis.title = element_text(size = 18),
axis.text = element_text(size = 10),
strip.text = element_text(size = 16, face = "bold"),
plot.title = element_text(size = 22),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
guides(fill = guide_colourbar(barwidth = 30, barheight = 1)) +
facet_wrap(~ month)
## Map predictive surfaces
ggplot() +
geom_tile(data = resistSurf.df, aes(x, y, fill = time)) +
scale_fill_viridis_c("Time Spent\nper Cell (min)", option = "inferno",
na.value = "transparent") +
geom_point(data = dat.em, aes(x, y),
size = 0.5, alpha = 0.5, show.legend = F, color = "chartreuse") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(x="Easting", y="Northing") +
theme_bw() +
coord_equal() +
theme(legend.position = "bottom",
axis.title = element_text(size = 18),
axis.text = element_text(size = 10),
strip.text = element_text(size = 16, face = "bold"),
plot.title = element_text(size = 22),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
guides(fill = guide_colourbar(barwidth = 30, barheight = 1)) +
facet_wrap(~ month)
write.csv(resistSurf.df, "Giant Armadillo Resistance Surfaces.csv")
library(tidyverse)
library(ggridges)
library(raster)
library(lubridate)
### Load data ###
path<- read.csv("Emanuel Resistance Data.csv", as.is = T)
path$dt<- path$dt/60  #convert to min from sec
path$month<- month.abb[month(path$date)]
path$month<- factor(path$month, levels = month.abb[c(5:12,1)])
# Filter data for only steps with 6 >= dt >= 8 min
cond<- path[path$dt >= 6 & path$dt <= 8 & !is.na(path$dt), "seg.id"]
path<- path[path$seg.id %in% cond,]
store.betas<- read.csv("Giant Armadillo Resistance Results.csv", as.is = T)
#look only at betas
store.betas<- store.betas[,2:9]
store.betas.long<- tidyr::pivot_longer(store.betas,
cols = names(store.betas),
names_to = "betas")
store.betas.long$betas<- factor(store.betas.long$betas, levels = names(store.betas))
ggplot(store.betas.long, aes(x=betas, y=value)) +
geom_boxplot(color="firebrick") +
geom_hline(yintercept = 0, size = 0.5) +
labs(x="Effect Sizes", y="Value") +
theme_bw() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12))
ggplot(store.betas.long, aes(y=betas, x=value, fill = betas)) +
geom_density_ridges() +
scale_fill_viridis_d("Coeffs", guide = guide_legend(reverse = TRUE)) +
geom_vline(xintercept = 0, size = 0.5) +
labs(y="Effect Sizes", x="Value") +
theme_bw() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12))
setwd("~/Documents/Snail Kite Project/Data/R Scripts/acceleration")
dat<- read.csv('Giant Armadillo state estimates.csv', as.is = T)
dat$date<- as_datetime(dat$date, tz = "UTC")
dat<- dat %>%
rename(x = easting, y = northing) %>%
mutate(across(c('z.map','z.post.thresh','z.post.max'), factor,
levels = c("Slow-Turn","Slow-Unif","Exploratory","Transit","Unclassified"))
)
dat$month<- month.abb[month(dat$date)]
dat$month<- factor(dat$month, levels = month.abb[c(5:12,1)])
# dat$season<- ifelse(dat$month %in% month.abb[1:7], "Flood", "Dry")
dat.em<-  dat %>%
filter(id == "emanuel")
#extract beta coeffs (mean)
betas<- colMeans(store.betas)
setwd("~/Documents/Snail Kite Project/Data/R Scripts/ValleLabUF/resist_avg")
evi<- brick('GiantArm_evi_monthly.grd')
evi<- crop(evi, extent(dat %>%
summarize(xmin = min(x) - 3000,
xmax = max(x) + 3000,
ymin = min(y) - 3000,
ymax = max(y) + 3000) %>%
unlist()))
evi[getValues(evi) > 1 | getValues(evi) < -1]<- NA  #mask pixels where values are outside of accepted range
evi.s<- scale(evi)
evi.s<- crop(evi.s, extent(dat.em %>%
summarize(xmin = min(x) - 3000,
xmax = max(x) + 3000,
ymin = min(y) - 3000,
ymax = max(y) + 3000) %>%
unlist()))
evi.s
##Perform raster math using beta coeffs
evi.s2<- evi.s[[which(names(evi.s) %in% unique(dat.em$month))]]
rango1<- range(path$evi)
knot.locs<- seq(rango1[1], rango1[2], length.out = 4)[2:3]
spline.evi<- bs(values(evi.s2), degree=2, intercept = FALSE, knots = knot.locs)
month.dumm<- factor(rep(unique(dat.em$month), each = ncell(evi.s2)), levels = unique(dat.em$month))
month.dumm<- model.matrix(~month.dumm + 0)
design.mat<- cbind(month.dumm[,-1], spline.evi)
resistVals<- as.vector(exp(design.mat %*% betas))
resistSurf<- evi.s2
values(resistSurf)<- resistVals
library(splines)
##Perform raster math using beta coeffs
evi.s2<- evi.s[[which(names(evi.s) %in% unique(dat.em$month))]]
#Run splines on standardized sequence
rango1<- range(path$evi)
knot.locs<- seq(rango1[1], rango1[2], length.out = 4)[2:3]
spline.evi<- bs(values(evi.s2), degree=2, intercept = FALSE, knots = knot.locs)
month.dumm<- factor(rep(unique(dat.em$month), each = ncell(evi.s2)), levels = unique(dat.em$month))
month.dumm<- model.matrix(~month.dumm + 0)
design.mat<- cbind(month.dumm[,-1], spline.evi)
resistVals<- as.vector(exp(design.mat %*% betas))
resistSurf<- evi.s2
values(resistSurf)<- resistVals
resistSurf
plot(resistSurf)
resistSurf.df<- as.data.frame(resistSurf, xy=T) %>%
pivot_longer(cols = -c(x,y), names_to = "month", values_to = "time")
resistSurf.df$month<- factor(resistSurf.df$month, levels = names(evi.s2))
## Map predictive surfaces
ggplot() +
geom_tile(data = resistSurf.df, aes(x, y, fill = time)) +
scale_fill_viridis_c("Time Spent\nper Cell (min)", option = "inferno",
na.value = "transparent") +
geom_point(data = dat.em, aes(x, y),
size = 0.5, alpha = 0.5, show.legend = F, color = "chartreuse") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(x="Easting", y="Northing") +
theme_bw() +
coord_equal() +
theme(legend.position = "bottom",
axis.title = element_text(size = 18),
axis.text = element_text(size = 10),
strip.text = element_text(size = 16, face = "bold"),
plot.title = element_text(size = 22),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
guides(fill = guide_colourbar(barwidth = 30, barheight = 1)) +
facet_wrap(~ month)
setwd("~/Documents/Snail Kite Project/Data/R Scripts/ValleLabUF/resist")
write.csv(resistSurf.df, "Giant Armadillo Resistance Surfaces.csv", row.names = F)
