path_df = purrr::map_dfr(path, as_data_frame, .id = "ID")
View(path_df)
View(path_df)
path_coords = xyFromCell(dist2rdN_30m, path_df$cell)
tail(path_df)
tail(path_coords)
pair_dist = geosphere::distGeo(path_coords)[-nrow(path_coords)]
pair_dist = geosphere::dist2Line(path_coords)[-nrow(path_coords)]
pair_dist = geosphere::distHaversine(path_coords)[-nrow(path_coords)]
str(path_coords)
?geosphere::distGeo()
class(path_coords)
geosphere::distGeo(path_coords[,1], path_coords[,2])
length(path_coords)
geosphere::distGeo(path_coords)
View(path_df)
plot(dist2rdN_30m)
lines(tm14.line)
lines(tm14)
View(path_coords)
colnames(path_coords)
foo<- dist2rdN_30m[1:10]
foo<- subset(dist2rdN_30m, 1:10)
new.rast<- rasterFromCells(dist2rdN_30m, path_df$cell)
plot(new.rast)
dim(dist2rdN_30m)
dist2rdN_30m
dim(dist2rdN_30m)[1:2]
foo<- raster(dim(dist2rdN_30m)[1:2])
foo<- raster(nrows=dim(dist2rdN_30m)[1], ncols=dim(dist2rdN_30m)[2])
dim(foo)
## create raster the same size as foo filled with NAs
bar<- raster(ncols=ncol(dist2rdN_30m), nrows=nrow(dist2rdN_30m))
bar
dist2rdN_30m
bar[]<- NA
bar
dist2rdN_30m[path_df$cell]
## replace the values with those in foo
bar[path_df$cell]<- dist2rdN_30m[path_df$cell]
bar
dist2rdN_30m
bar<- projectRaster(bar, crs = crs(dist2rdN_30m))
bar
## create raster the same size as foo filled with NAs
bar<- raster(ncols=ncol(dist2rdN_30m), nrows=nrow(dist2rdN_30m))
bar
bar<- projectRaster(bar, crs = crs(dist2rdN_30m))
bar
## create raster the same size as foo filled with NAs
bar<- dist2rdN_30m
bar[]<- NA
bar
## replace the values with those in foo
bar[path_df$cell]<- dist2rdN_30m[path_df$cell]
bar
plot(bar)
lines(tm14$x, tm14$y)
tm14<- dat.N %>% filter(id == "tm14")
tm14<- st_as_sf()
set.seed(131)
n=50000
nparam=3
xmat=matrix(runif(n*nparam,min=-1.5,max=1.5),n,nparam)
nomes.cov=paste0('covs',1:nparam)
colnames(xmat)=nomes.cov
# n=nrow(xmat)
ngroup=7
betas.true=betas=matrix(c(-1,0 , 1,-1, 0, 1, 0,
1,0 , 1,-1, 1, 0,-1,
-1,-1, 0, 0, 0,-1, 0,
0, 0,-1, 1,-1, 0, 1),nparam+1,ngroup,byrow=T)
media=exp(cbind(1,xmat)%*%betas); range(round(media,3))
b.true=b=1
a=b*media
ymat=matrix(rgamma(n*ngroup,a,b),n,ngroup); range(ymat)
fim=as.data.frame(xmat)
fim$z=NA
fim$ysoma=NA
fim$seg.id=NA
#aggregate these data
ind=floor(c(seq(from=1,to=n,by=n/1000),n+1)) #has to include 1 and n to use all observations
for (i in 2:length(ind)){
seq1=ind[i-1]:(ind[i]-1)
n=length(seq1)
fim$seg.id[seq1]=i-1
z=sample(1:ngroup,size=1)
fim$z[ind[i]-1]=z
ysoma=ymat[seq1,z]
fim$ysoma[ind[i]-1]=sum(ysoma)
}
max(fim$seg.id)
length(unique(fim$seg.id))
#get z.true
tmp=unique(fim[,c('z','seg.id')])
z.true=tmp[!is.na(tmp$z),'z']
table(z.true)
#export results
ind=which(colnames(fim)=='z')
View(fim)
View(path_df)
View(tm14)
foo<- diff(tm14$date)
foo
str(tm14)
1380/60
1176/60
foo<- diff(tm14$date)/60
foo
foo<- diff(tm14$date)*60
foo
lines(path_coords[,1], path_coords[,2], col="red")
path_df<- cbind(path_df, path_coords)
View(path_df)
plot(path_df$EucDist_cerc_Copy, type="l")
class(foo)
View(tm14)
path<- raster::extract(dist2rdN_30m, tm14.line, along = TRUE, cellnumbers = TRUE)
View(path)
path_df<- purrr::map_dfr(path, as_data_frame, .id = "ID")
View(path_df)
tm14<- dat.N %>% filter(id == "tm14")
tm14.line<- tm14 %>%
dplyr::select(x,y) %>%
as.matrix() %>%
st_linestring() %>%
st_sfc(crs = projection(EucDist_cerc_Copy.tif))
tm14.line
class(tm14.line)
tm14.line<- tm14 %>%
dplyr::select(x,y) %>%
as.matrix() %>%
st_linestring() %>%
st_sfc(crs = projection(EucDist_cerc_Copy.tif)) %>%
st_sf()
class(tm14.line)
tm14.line<- tm14 %>%
dplyr::select(x,y) %>%
as.matrix() %>%
st_linestring() %>%
st_sfc(crs = projection(EucDist_cerc_Copy.tif))
path<- raster::extract(dist2rdN_30m, tm14.line, along = TRUE, cellnumbers = TRUE)
tm14.line<- tm14 %>%
dplyr::select(x,y) %>%
as.matrix() %>%
st_linestring() %>%
st_sfc(crs = projection(EucDist_cerc_Copy.tif)) %>%
as(., "Spatial")
path<- raster::extract(dist2rdN_30m, tm14.line, along = TRUE, cellnumbers = TRUE)
View(path)
path_df<- purrr::map_dfr(path, as_data_frame, .id = "ID")
View(path_df)
tm14.line<- tm14 %>%
dplyr::select(x,y) %>%
as.matrix() %>%
st_linestring() %>%
st_sfc(crs = projection(EucDist_cerc_Copy.tif)) %>%
st_sf()
plot(bar)
plot(st_geometry(tm14.line, add=T))
class(tm14.line)
View(tm14.line)
plot(st_geometry(tm14.line$, add=T), col="red")
plot(st_geometry(tm14.line$), add=T, col="red")
plot(st_geometry(tm14.line), add=T, col="red")
plot(bar)
plot(st_geometry(tm14.line), add=T)
plot(dist2rdN_30m)
plot(st_geometry(tm14.line), add=T)
track = st_join(tm14.line, st_as_sf(dist2rdN_30m))
class(dist2rdN_30m)
st_as_sf(dist2rdN_30m)
View(tm14)
coords<- cellFromXY(dist2rdN_30m, tm14[,c("x","y")])
coords
View(path_df)
tm14$cell<- cellFromXY(dist2rdN_30m, tm14[,c("x","y")])
plot(st_geometry(tm14.line))
plot(st_geometry(tm14.line)[1:10])
plot(tm14$x[1:10], tm14$y[1:10], type = "l")
plot(dist2rdN_30m, type="n")
plot(rasterToPolygons(dist2rdN_30m), add=TRUE, border='black', lwd=1)
ggplot(tm14.line) +
geom_sf() +
geom_tile(as.data.frame(dist2rdN_30m), as.xy=T)
ggplot(tm14.line) +
geom_sf() +
geom_tile(data=as.data.frame(dist2rdN_30m), aes(x,y), as.xy=T)
ggplot(tm14.line) +
geom_sf() +
geom_tile(data=as.data.frame(dist2rdN_30m, as.xy=T), aes(x,y))
]
plot(tm14$x[1:10], tm14$y[1:10], type = "o")
plot(tm14$x[1:3], tm14$y[1:3], type = "o")
plot(tm14$x[1:4], tm14$y[1:4], type = "o")
head(path_df)
path_df[1:10,]
ind<- vector()
i=5
ind<- c(ind, i)
ind<- vector()
for ( i in 2:nrow(path_df)) {
if (path_df$cell[i] == path_df$cell[i+1])
ind<- c(ind, i)
}
(nrow(path_df) - 1)
ind<- vector()
for (i in 2:(nrow(path_df) - 1)) {
if (path_df$cell[i] == path_df$cell[i+1])
ind<- c(ind, i)
}
ind
diff(tm14$date) %>% second()
tm14$date %>% second()
tm14$date %>% seconds()
tm14$date %>% seconds() %>% diff()
tm14$date %>% seconds() %>% diff() %>% c(NA,.)
tm14$dt<- tm14$date %>% seconds() %>% diff() %>% c(NA,.)
View(dat)
View(fim)
seq_along(path_df)
nrow(path_df)
ind
path_df$time1<- 1:nrow(path_df)
tm14$time1<- c(1, ind)
tail(ind)
nrow(path_df)
tm14$time1<- c(1, ind, nrow(path_df))
resist.dat<- left_join(path_df, tm14, by = time1)
resist.dat<- left_join(path_df, tm14, by = 'time1')
View(resist.dat)
foo<- resist.dat %>%
drop_na()
View(foo)
foo<- resist.dat %>%
drop_na() %>%
identical(cell.x, cell.y)
foo<- resist.dat %>%
drop_na() %>%
identical(.$cell.x, .$cell.y)
resist.dat %>%
drop_na() %>%
identical(.$cell.x, .$cell.y)
head()
head(resist.dat$cell.x)
head(resist.dat$cell.y)
foo<- resist.dat %>%
drop_na() %>%
filter(cell.x != cell.y)
View(foo)
foo<- resist.dat %>%
drop_na() %>%
filter(cell.x == cell.y)
ggplot(tm14.line) +
geom_sf() +
geom_tile(data=as.data.frame(dist2rdN_30m, as.xy=T), aes(x,y))
#double-check that extracted grid cells overlap with tm14 path
bar<- dist2rdN_30m
bar[]<- NA
bar[path_df$cell]<- dist2rdN_30m[path_df$cell]
plot(dist2rdN_30m)
plot(bar)
plot(st_geometry(tm14.line), add=T)
n=50000
#aggregate these data
ind=floor(c(seq(from=1,to=n,by=n/1000),n+1)) #has to include 1 and n to use all observations
#Determine which cells (chronologically) are associated with those from path_df
ind<- vector()
for (i in 2:(nrow(path_df) - 1)) {
if (path_df$cell[i] == path_df$cell[i+1])
ind<- c(ind, i)
}
length(tm14$time1)
i=2
ind<- c(1, ind, nrow(path_df))
ind[i-1]:(ind[i]-1)
View(resist.dat)
resist.dat[(ind[i]-1),]
View(fim)
resist.dat[(ind[i]),]
ind[i-1]:(ind[i]-1)
seq1=ind[i-1]:(ind[i]-1)
ind[i-1]:ind[i]
seq1=ind[i-1]:ind[i]
i=3
ind[i-1]:ind[i]
(ind[i-1]+1):ind[i]
ind<- c(ind, nrow(path_df))
i=2
ind[i-1]:ind[i]
ind<- c(ind, nrow(path_df))
#Determine which cells (chronologically) are associated with those from path_df
ind<- vector()
for (i in 2:(nrow(path_df) - 1)) {
if (path_df$cell[i] == path_df$cell[i+1])
ind<- c(ind, i)
}
ind<- c(ind, nrow(path_df))
ind[i-1]:ind[i]
i=2
ind[i-1]:ind[i]
#Determine which cells (chronologically) are associated with those from path_df
ind<- vector()
for (i in 2:(nrow(path_df) - 1)) {
if (path_df$cell[i] == path_df$cell[i+1])
ind<- c(ind, i)
}
ind<- c(1, ind, nrow(path_df))
ind[i-1]:ind[i]
i=2
ind[i-1]:ind[i]
i=3
ind[i-1]:ind[i]
i=4
ind[i-1]:ind[i]
(ind[i-1] + 1):ind[i]
i=2
(ind[i-1] + 1):ind[i]
length(ind)
#Add seg.id column
for (i in 2:length(ind)){
seq1=(ind[i-1] + 1):ind[i]
resist.dat$seg.id[seq1]=i-1
}
#Add seg.id column
resist.dat$seg.id<- NA
resist.dat$seg.id[1]<- 1
for (i in 2:length(ind)){
seq1=(ind[i-1] + 1):ind[i]
resist.dat$seg.id[seq1]=i-1
}
setwd("~/Documents/Snail Kite Project/Data/armadillos")
library(tidyverse)
library(sf)
library(raster)
library(lubridate)
library(sp)
###################
### Import data ###
###################
dat<- read.csv("three_banded_over20_for_Josh.csv", header = T, sep = ",")
dat$id<- as.factor(dat$id)
dat$date<- as.POSIXct(strptime(dat$date, format = "%d/%m/%Y %H:%M"))
coords<- dat[c("x","y")]
dat.spdf<- SpatialPointsDataFrame(coords = coords, data = dat)
proj4string(dat.spdf)<- CRS("+init=epsg:32721")
dat.N<- dat[dat$y > 8100000,]
dat.S<- dat[dat$y < 8100000,]
### Read in rasters
setwd("~/Documents/Snail Kite Project/Data/armadillos/Environ Data")
rast <- dir(getwd(), "*.tif$")
for (i in rast) assign(i, raster(i))
plot(classes_DL_padrao.tif)
plot(EucDist_cerc_Copy.tif); points(dat.N$x, dat.N$y)
plot(EucDist_cercaAm.tif); points(dat.S$x, dat.S$y)
plot(EucDist_cerc_Copy.tif); points(dat.N$x, dat.N$y)
dat.N %>% group_by(id) %>% tally()
## Stick with tm14 from northern site using EucDist_cerc_Copy.tif layer
tm14<- dat.N %>% filter(id == "tm14")
tm14.line<- tm14 %>%
dplyr::select(x,y) %>%
as.matrix() %>%
st_linestring() %>%
st_sfc(crs = projection(EucDist_cerc_Copy.tif)) %>%
st_sf()
#Change res of EucDist layer closer to 30 m (26 m) fomr 13 m
dist2rdN_30m<- raster::aggregate(EucDist_cerc_Copy.tif,
fact = 2,
fun = mean)
path<- raster::extract(dist2rdN_30m, tm14.line, along = TRUE, cellnumbers = TRUE)
path_df = purrr::map_dfr(path, as_data_frame, .id = "ID")
names(path_df)[3]<- "dist2rd"
path_coords = xyFromCell(dist2rdN_30m, path_df$cell)
# pair_dist = geosphere::distGeo(path_coords)[-nrow(path_coords)]
# transect_df$dist = c(0, cumsum(pair_dist))
#double-check that extracted grid cells overlap with tm14 path
bar<- dist2rdN_30m
bar[]<- NA
bar[path_df$cell]<- dist2rdN_30m[path_df$cell]
plot(bar)
plot(st_geometry(tm14.line), add=T)
#Label all observations with cell number and time interval
tm14$cell<- cellFromXY(dist2rdN_30m, tm14[,c("x","y")])
tm14$dt<- tm14$date %>% seconds() %>% diff() %>% c(NA,.)
#Determine which cells (chronologically) are associated with those from path_df
ind<- vector()
for (i in 2:(nrow(path_df) - 1)) {
if (path_df$cell[i] == path_df$cell[i+1])
ind<- c(ind, i)
}
ind<- c(1, ind, nrow(path_df))
#Add time index to both DFs for merging
path_df$time1<- 1:nrow(path_df)
tm14$time1<- ind
#Merge datasets
resist.dat<- left_join(path_df, tm14, by = 'time1')
#Add seg.id column
resist.dat$seg.id<- NA
resist.dat$seg.id[1]<- 1  #need to define for 1st obs
for (i in 2:length(ind)){
seq1=(ind[i-1] + 1):ind[i]
resist.dat$seg.id[seq1]=i-1
}
setwd("~/Documents/Snail Kite Project/Data/R Scripts/ValleLabUF/resist")
write.csv(resist.dat, "Armadillo Resistance Data.csv", row.names = F)
dat=read.csv('Armadillo Resistance Data.csv',as.is=T)
ind=grep('dist2rd',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
seg.id=dat$seg.id
ngroup=10
#get y soma
tmp=unique(dat[,c('seg.id','dt')])
cond=!is.na(tmp$dt)
ysoma=tmp[cond,'dt']
ngibbs=10000
nburn=ngibbs/2
#priors
gamma1=0.1
var.betas=c(100,rep(1,ncol(xmat)-1))
library('Rcpp')
set.seed(1)
source('gibbs_resist.R')
source('gibbs_resist_func.R')
sourceCpp('resist_aux.cpp')
dat=read.csv('Armadillo Resistance Data.csv',as.is=T)
ind=grep('dist2rd',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
seg.id=dat$seg.id
ngroup=10
#get y soma
tmp=unique(dat[,c('seg.id','dt')])
cond=!is.na(tmp$dt)
ysoma=tmp[cond,'dt']
ngibbs=10000
nburn=ngibbs/2
#priors
gamma1=0.1
var.betas=c(100,rep(1,ncol(xmat)-1))
ysoma
xmat
seg.id
ngroup
ngibbs
nburn
var.betas
gamma1
mod.res=gibbs_resist(ysoma=ysoma,xmat=xmat,seg.id=seg.id,ngroup=ngroup,
ngibbs=ngibbs,nburn=nburn,var.betas=var.betas,
gamma1=gamma1)
View(mod.res)
store.llk=mod.res$llk
store.b=mod.res$b.gamma
store.betas=mod.res$betas
z.estim=mod.res$z.estim
#look at overall convergence
plot(store.llk,type='l')
nburn=500
abline(v=nburn,col='red')
plot(store.llk[nburn:ngibbs],type='l')
#look at overall convergence
plot(store.llk,type='l')
nburn=2000
abline(v=nburn,col='red')
plot(store.llk[nburn:ngibbs],type='l')
#look at overall convergence
plot(store.llk,type='l')
nburn=2100
abline(v=nburn,col='red')
plot(store.llk[nburn:ngibbs],type='l')
plot(store.b,type='l')
plot(store.b[nburn:ngibbs],type='l')
acf(store.b[nburn:ngibbs])
dim(store.betas)
ncol(store.betas)
#look at convergence betas
par(mfrow=c(3,3),mar=rep(1,4))
ind=sample(1:ncol(store.betas),size=9)
for (i in 1:9) plot(store.betas[1:ngibbs,ind[i]],type='l')
for (i in 1:9) plot(store.betas[nburn:ngibbs,ind[i]],type='l')
#look at overall convergence
plot(store.llk,type='l')
dev.off()
#look at overall convergence
plot(store.llk,type='l')
nburn=5000
abline(v=nburn,col='red')
plot(store.llk[nburn:ngibbs],type='l')
plot(store.b,type='l')
plot(store.b[nburn:ngibbs],type='l')
acf(store.b[nburn:ngibbs])
#look at convergence betas
par(mfrow=c(3,3),mar=rep(1,4))
ind=sample(1:ncol(store.betas),size=9)
for (i in 1:9) plot(store.betas[1:ngibbs,ind[i]],type='l')
for (i in 1:9) plot(store.betas[nburn:ngibbs,ind[i]],type='l')
#look at theta
theta.estim=apply(mod.res$theta[nburn:ngibbs,],2,mean)
plot(theta.estim,type='h',ylim=c(0,1))
dev.off()
plot(theta.estim,type='h',ylim=c(0,1))
#look at theta
boxplot(mod.res$theta[nburn:ngibbs,])
table(mod.res$z.estim)
ngroup=10
par(mfrow=c(1,1),mar=rep(3,4))
betas.estim=matrix(store.betas[ngibbs,],ncol(store.betas)/ngroup,ngroup)
boxplot(betas.estim)
dev.off()
ncol(store.betas)
ncol(store.betas)/ngroup
store.betas[ngibbs,]
boxplot(store.betas[nburn:ngibbs,1:10])
