st_linestring() %>%
st_sfc(crs = projection(layers)) %>%
st_sf()
tmp1<- raster::extract(layers, segment, along = TRUE, cellnumbers = FALSE) %>%
purrr::map(., ~matrix(., ncol = nlayers(layers))) %>%
purrr::map_dfr(., as_data_frame, .id = "seg.id") %>%
dplyr::mutate(seg.id = j-1, dt = NA, id = unique(dat$id), date = tmp$date[j-1],
state = tmp[j-1,state.col]) %>%
as.data.frame()
tmp1[nrow(tmp1),"dt"]<- as.numeric(tmp$dt[j-1])
names(tmp1)[2:(1 + nlayers(layers))]<- names(layers)
#subset to only include time-matched vars (by some indicator variable)
cond<- tmp[j-1, ind]
cond2<- levels(cond)[which(cond != levels(cond))]
tmp1<- tmp1[,!stringr::str_detect(names(tmp1), paste(cond2, collapse="|"))]
ind1<- stringr::str_which(names(tmp1), as.character(cond))
names(tmp1)[ind1]<- dyn_names
extr.covar<- rbind(extr.covar, tmp1)
}
j=2
extr.covar<- data.frame()
# print(j)
segment<- tmp[(j-1):j, c("x","y")] %>%
as.matrix() %>%
st_linestring() %>%
st_sfc(crs = projection(layers)) %>%
st_sf()
tmp1<- raster::extract(layers, segment, along = TRUE, cellnumbers = FALSE) %>%
purrr::map(., ~matrix(., ncol = nlayers(layers))) %>%
purrr::map_dfr(., as_data_frame, .id = "seg.id") %>%
dplyr::mutate(seg.id = j-1, dt = NA, id = unique(dat$id), date = tmp$date[j-1],
state = tmp[j-1,state.col]) %>%
as.data.frame()
tmp1[nrow(tmp1),"dt"]<- as.numeric(tmp$dt[j-1])
names(tmp1)[2:(1 + nlayers(layers))]<- names(layers)
#subset to only include time-matched vars (by some indicator variable)
cond<- tmp[j-1, ind]
cond2<- levels(cond)[which(cond != levels(cond))]
tmp1<- tmp1[,!stringr::str_detect(names(tmp1), paste(cond2, collapse="|"))]
ind1<- stringr::str_which(names(tmp1), as.character(cond))
names(tmp1)[ind1]<- dyn_names
View(tmp1)
View(dat.list)
dat<- dat.list[[6]]
#Subset and prep data
tmp<- dat %>%
# dplyr::filter(id == ind[i]) %>%
dplyr::mutate(dt = difftime(date, dplyr::lag(date, 1), units = "secs")) %>%
dplyr::mutate_at("dt", {. %>%
as.numeric() %>%
round()})
tmp$dt<- c(purrr::discard(tmp$dt, is.na), NA)
if (!is.null(dyn_names) & !is.factor(tmp[,ind])) stop("The `ind` column must be a factor.")
#Identify levels of categorical layer (if available)
if (!is.null(which_cat)) lev<- layers[[which_cat]]@data@attributes[[1]][,1]
extr.covar<- data.frame()
# print(j)
segment<- tmp[(j-1):j, c("x","y")] %>%
as.matrix() %>%
st_linestring() %>%
st_sfc(crs = projection(layers)) %>%
st_sf()
tmp1<- raster::extract(layers, segment, along = TRUE, cellnumbers = FALSE) %>%
purrr::map(., ~matrix(., ncol = nlayers(layers))) %>%
purrr::map_dfr(., as.data.frame, .id = "seg.id") %>%
dplyr::mutate(seg.id = j-1, dt = NA, id = unique(dat$id), date = tmp$date[j-1],
state = tmp[j-1,state.col]) %>%
as.data.frame()
View(tmp1)
tmp1[nrow(tmp1),"dt"]<- as.numeric(tmp$dt[j-1])
names(tmp1)[2:(1 + nlayers(layers))]<- names(layers)
#subset to only include time-matched vars (by some indicator variable)
cond<- tmp[j-1, ind]
cond2<- levels(cond)[which(cond != levels(cond))]
tmp1<- tmp1[,!stringr::str_detect(names(tmp1), paste(cond2, collapse="|"))]
ind1<- stringr::str_which(names(tmp1), as.character(cond))
names(tmp1)[ind1]<- dyn_names
extr.covar<- data.frame()
#Extract values from each line segment
for (j in 2:nrow(tmp)) {
# print(j)
segment<- tmp[(j-1):j, c("x","y")] %>%
as.matrix() %>%
st_linestring() %>%
st_sfc(crs = projection(layers)) %>%
st_sf()
tmp1<- raster::extract(layers, segment, along = TRUE, cellnumbers = FALSE) %>%
purrr::map(., ~matrix(., ncol = nlayers(layers))) %>%
purrr::map_dfr(., as.data.frame, .id = "seg.id") %>%
dplyr::mutate(seg.id = j-1, dt = NA, id = unique(dat$id), date = tmp$date[j-1],
state = tmp[j-1,state.col]) %>%
as.data.frame()
tmp1[nrow(tmp1),"dt"]<- as.numeric(tmp$dt[j-1])
names(tmp1)[2:(1 + nlayers(layers))]<- names(layers)
#subset to only include time-matched vars (by some indicator variable)
cond<- tmp[j-1, ind]
cond2<- levels(cond)[which(cond != levels(cond))]
tmp1<- tmp1[,!stringr::str_detect(names(tmp1), paste(cond2, collapse="|"))]
ind1<- stringr::str_which(names(tmp1), as.character(cond))
names(tmp1)[ind1]<- dyn_names
extr.covar<- rbind(extr.covar, tmp1)
}
View(extr.covar)
dat<- dat.list$blanca
#Subset and prep data
tmp<- dat %>%
# dplyr::filter(id == ind[i]) %>%
dplyr::mutate(dt = difftime(date, dplyr::lag(date, 1), units = "secs")) %>%
dplyr::mutate_at("dt", {. %>%
as.numeric() %>%
round()})
tmp$dt<- c(purrr::discard(tmp$dt, is.na), NA)
if (!is.null(dyn_names) & !is.factor(tmp[,ind])) stop("The `ind` column must be a factor.")
#Identify levels of categorical layer (if available)
if (!is.null(which_cat)) lev<- layers[[which_cat]]@data@attributes[[1]][,1]
extr.covar<- data.frame()
#Extract values from each line segment
for (j in 2:nrow(tmp)) {
# print(j)
segment<- tmp[(j-1):j, c("x","y")] %>%
as.matrix() %>%
st_linestring() %>%
st_sfc(crs = projection(layers)) %>%
st_sf()
tmp1<- raster::extract(layers, segment, along = TRUE, cellnumbers = FALSE) %>%
purrr::map(., ~matrix(., ncol = nlayers(layers))) %>%
purrr::map_dfr(., as.data.frame, .id = "seg.id") %>%
dplyr::mutate(seg.id = j-1, dt = NA, id = unique(dat$id), date = tmp$date[j-1],
state = tmp[j-1,state.col]) %>%
as.data.frame()
tmp1[nrow(tmp1),"dt"]<- as.numeric(tmp$dt[j-1])
names(tmp1)[2:(1 + nlayers(layers))]<- names(layers)
#subset to only include time-matched vars (by some indicator variable)
cond<- tmp[j-1, ind]
cond2<- levels(cond)[which(cond != levels(cond))]
tmp1<- tmp1[,!stringr::str_detect(names(tmp1), paste(cond2, collapse="|"))]
ind1<- stringr::str_which(names(tmp1), as.character(cond))
names(tmp1)[ind1]<- dyn_names
extr.covar<- rbind(extr.covar, tmp1)
}
View(extr.covar)
setwd("~/Documents/Snail Kite Project/Data/R Scripts/ValleLabUF/resist")
source('helper functions.R')
extract.covars
extract.covars.internal
source('helper functions.R')
nbrOfWorkers()
progressr::with_progress({  #to print progress bar
path<- extract.covars(data = dat, layers = covars, state.col = "z.post.thresh",
dyn_names = c("ndvi","awei"), ind = "season")
})
future:::ClusterRegistry("stop")  #close all threads and memory used
View(path)
# Armadillo Data
write.csv(path, "Giant Armadillo Resistance Data.csv", row.names = F)
source('helper functions.R')
nbrOfWorkers()
progressr::with_progress({  #to print progress bar
path<- extract.covars(data = dat, layers = covars, state.col = "z.post.thresh",
dyn_names = c("ndvi","awei"), ind = "season")
})
library(Rcpp)
library(mvtnorm)
library(dplyr)
library(ggplot2)
library(tidyr)
library(tictoc)
source('gibbs_resist.R')
source('gibbs_resist_func.R')
source('slice_b_gamma.R')
source('slice_betas.R')
sourceCpp('resist_aux.cpp')
library(Rcpp)
library(mvtnorm)
library(dplyr)
library(ggplot2)
library(tidyr)
library(tictoc)
source('gibbs_resist.R')
source('gibbs_resist_func.R')
source('slice_b_gamma.R')
source('slice_betas.R')
sourceCpp('resist_aux.cpp')
path<- read.csv("Giant Armadillo Resistance Data.csv", as.is = T)
path$dt<- path$dt/60  #convert to min from sec
# Filter data for only steps with 6 >= dt >= 8 min
cond<- path[path$dt >= 6 & path$dt <= 8 & !is.na(path$dt), "seg.id"]
path<- path[path$seg.id %in% cond,]
# Center and Scale covariate
path.s<- path %>%
mutate_at(c("ndvi","awei"),
~scale(., center = TRUE, scale = TRUE)) %>%
drop_na(ndvi)
# Center and Scale covariate
path.s<- path %>%
mutate_at(c("ndvi","awei"),
~scale(., center = TRUE, scale = TRUE)) %>%
drop_na(awei)
# Center and Scale covariate
path.s<- path %>%
mutate_at(c("ndvi","awei"),
~scale(., center = TRUE, scale = TRUE)) %>%
drop_na(ndvi)
ind<- c("ndvi", "awei")
xmat<- data.matrix(cbind(1, path.s[,ind]))
View(xmat)
#reformat seg.id so it is consecutive and numeric
path.s$seg.id<- factor(path.s$seg.id)
levels(path.s$seg.id)<- 1:length(unique(path.s$seg.id))
path.s$seg.id<- as.numeric(path.s$seg.id)
#check seg.id
seg.id<- path.s$seg.id
k<- unique(seg.id)
unique(k-c(1:max(k))) #should be 0
#get y soma
cond=!is.na(path.s$dt)
ysoma=path.s[cond,'dt']
#model args
ngibbs=2000
nburn=ngibbs/2
w=0.1
MaxIter=10000
#priors
var.betas=rep(10,ncol(xmat)) #changed
#Run model
set.seed(123)
mod<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
w = w, MaxIter = MaxIter)
store.llk<- mod$llk
store.b<- mod$b.gamma
store.betas<- mod$betas
#look at overall convergence
plot(store.llk, type='l')
abline(v=nburn, col='red')
plot(store.llk[(nburn + 1):ngibbs], type='l')
acf(store.llk[(nburn + 1):ngibbs])
plot(store.b, type='l')
plot(store.b[(nburn + 1):ngibbs], type='l')
acf(store.b[(nburn + 1):ngibbs])
#look at convergence betas
par(mfrow=c(2,2))
nbetas<- ncol(mod$betas)
for (i in 1:nbetas){
plot(mod$betas[,i], type='l')
}
corr(path$ndvi, path$awei)
cor(path$ndvi, path$awei)
for (i in 1:nbetas){
plot(mod$betas[(nburn + 1):ngibbs, i], type='l')
}
par(mfrow=c(1,1),mar=rep(3,4))
library(ggridges)
library(raster)
library(lubridate)
#look at betas (convert to data frame)
store.betas<- data.frame(mod$betas[(nburn+1):ngibbs, ])
names(store.betas)<- c("int","ndvi","awei")
store.betas.long<- tidyr::pivot_longer(store.betas,
cols = names(store.betas),
names_to = "betas")
store.betas.long$betas<- factor(store.betas.long$betas,
levels = names(store.betas))
ggplot(store.betas.long, aes(x=betas, y=value)) +
geom_boxplot(color="firebrick") +
geom_hline(yintercept = 0, size = 0.5) +
labs(x="Effect Sizes", y="Value") +
theme_bw() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12))
ggplot(store.betas.long, aes(y=betas, x=value, fill = betas)) +
geom_density_ridges() +
scale_fill_viridis_d("Coeffs", guide = guide_legend(reverse = TRUE)) +
geom_vline(xintercept = 0, size = 0.5) +
labs(y="Effect Sizes", x="Value") +
theme_bw() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12))
#Load data to plot tracks
setwd("~/Documents/Snail Kite Project/Data/R Scripts/acceleration")
dat<- read.csv('Giant Armadillo state estimates.csv', as.is = T)
dat$date<- as_datetime(dat$date, tz = "UTC")
dat<-  dat %>%
rename(x = easting, y = northing) %>%
mutate(across(c('z.map','z.post.thresh','z.post.max'), factor,
levels = c("Slow-Turn","Slow-Unif","Exploratory","Transit","Unclassified"))
)
dat$month<- month.abb[month(dat$date)]
dat$month<- factor(dat$month, levels = month.abb[c(5:12,1)])
dat$season<- ifelse(dat$month %in% month.abb[1:7], "Flood", "Dry")
#extract beta coeffs (mean)
betas<- colMeans(store.betas)
#Load env raster data
## NDVI
setwd("~/Documents/Snail Kite Project/Data/R Scripts/ValleLabUF/resist_avg")
ndvi<- brick('GiantArm_ndvi_season.grd')
ndvi<- crop(ndvi, extent(dat %>%
summarize(xmin = min(x) - 3000,
xmax = max(x) + 3000,
ymin = min(y) - 3000,
ymax = max(y) + 3000) %>%
unlist()))
ndvi.s<- scale(ndvi, center = T, scale = T)
awei<- brick('GiantArm_awei_season.grd')
awei<- crop(awei, ndvi)
awei.s<- scale(awei, center = T, scale = T)
##Perform raster math using beta coeffs
resistSurf_flood<- exp(
betas["int"] +
betas["ndvi"]*ndvi.s$Flood  #for Flood
betas["awei"]*awei.s$Flood  #for Flood
)
##Perform raster math using beta coeffs
resistSurf_flood<- exp(
betas["int"] +
betas["ndvi"]*ndvi.s$Flood +  #for Flood
betas["awei"]*awei.s$Flood  #for Flood
)
resistSurf_flood.df<- as.data.frame(resistSurf_flood, xy=T) %>%
mutate(season = "Flood")
resistSurf_dry<- exp(
betas["int"] +
betas["ndvi"]*ndvi.s$Dry +  #for Dry
betas["awei"]*awei.s$Dry  #for Dry
)
resistSurf_dry.df<- as.data.frame(resistSurf_dry, xy=T) %>%
mutate(season = "Dry")
#Combine all results together for each season
resistSurf.df<- rbind(resistSurf_flood.df, resistSurf_dry.df)
## Map predictive surfaces
ggplot() +
geom_tile(data = resistSurf.df, aes(x, y, fill = layer)) +
scale_fill_viridis_c("Time Spent\nper Cell (min)", option = "inferno",
na.value = "transparent") +
# geom_point(data = dat.N %>% filter(state == "Foraging"), aes(x, y, color = id),
#            size = 0.5, alpha = 0.2, show.legend = F) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(x="Easting", y="Northing") +
theme_bw() +
coord_equal() +
theme(legend.position = "bottom",
axis.title = element_text(size = 18),
axis.text = element_text(size = 10),
strip.text = element_text(size = 16, face = "bold"),
plot.title = element_text(size = 22),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
guides(fill = guide_colourbar(barwidth = 30, barheight = 1)) +
facet_wrap(~ season)
betas
plot(awei)
awei
awei.s
plot(awei.s)
quantile(getValues(awei.s$Flood), 0.9)
quantile(getValues(awei.s$Flood), 0.99)
foo<- awei.s$Flood
foo[values(foo) < 3.13]<- -1
foo
foo[values(foo) > ]<- 1
foo[values(foo) > 0]<- 1
foo
plot(foo)
foo<- awei.s$Flood
quantile(getValues(awei.s$Flood), 0.9)
foo[values(foo) < 1.17]<- -1
foo[values(foo) > 0]<- 1
plot(foo)
foo2<- awei.s$Dry
quantile(getValues(awei.s$Dry), 0.9)
foo2[values(foo2) < 1.17]<- -1
foo2[values(foo2) > 0]<- 1
plot(foo2)
quantile(getValues(awei.s$Dry), 0.95)
foo2<- awei.s$Dry
foo2[values(foo2) < 1.52]<- -1
foo2[values(foo2) > 0]<- 1
plot(foo2)
quantile(getValues(awei.s$Flood), 0.95)
foo<- awei.s$Flood
foo[values(foo) < 1.93]<- -1
foo[values(foo) > 0]<- 1
plot(foo)
library(cranlogs)
foo<- cranlogs::cran_downloads("bayesmove", "last-week")
ggplot(foo, aes(date, count)) + geom_line() + geom_point() + theme_bw()
library(ggplot2)
ggplot(foo, aes(date, count)) + geom_line() + geom_point() + theme_bw()
foo<- cranlogs::cran_downloads("bayesmove", "last-month")
ggplot(foo, aes(date, count)) + geom_line() + geom_point() + theme_bw()
setwd("~/Documents/Snail Kite Project/Data/R Scripts/ValleLabUF/resist/NDVI-Sentinel2")
ndvi<- list.files()
ndvi.stack<- raster::stack(ndvi)
ndvi.stack<- raster::flip(ndvi.stack, direction = "y")
breaks<- seq(0, 1, by=0.01)
cols<- colorRampPalette(c('#FFFFFF', '#CE7E45', '#DF923D', '#F1B555', '#FCD163', '#99B718',
'#74A901', '#66A000', '#529400', '#3E8601', '#207401', '#056201',
'#004C00', '#023B01', '#012E01', '#011D01', '#011301'
))(length(breaks)-1)
##plot
rasterVis::levelplot(ndvi.stack, at=breaks, col.regions=cols, main="NDVI")
ndvi<- list.files()
ndvi.stack<- raster::stack(ndvi)
ndvi.stack<- raster::flip(ndvi.stack, direction = "y")
##plot
rasterVis::levelplot(ndvi.stack, at=breaks, col.regions=cols, main="NDVI")
ndvi<- list.files()
ndvi.stack<- raster::stack(ndvi)
ndvi.stack<- raster::flip(ndvi.stack, direction = "y")
##plot
rasterVis::levelplot(ndvi.stack, at=breaks, col.regions=cols, main="NDVI")
setwd("~/Documents/Snail Kite Project/Data/R Scripts/ValleLabUF/resist_avg/NDWI")
ndwi<- list.files()
ndwi<- list.files()
ndwi.stack<- raster::stack(ndwi)
ndwi.stack<- raster::flip(ndwi.stack, direction = "y")
breaks<- seq(-1, 1, by=0.1)
cols<- colorRampPalette(c("#00FFFF", "#0000FF"))(length(breaks)-1)
##plot
rasterVis::levelplot(ndwi.stack, at=breaks, col.regions=cols, main="NDWI")
library(tidyverse)
library(sf)
library(raster)
library(lubridate)
library(sp)
library(furrr)
library(future)
library(progressr)
setwd("~/Documents/Snail Kite Project/Data/R Scripts/acceleration")
dat<- read.csv('Giant Armadillo state estimates.csv', as.is = T)
dat$date<- as_datetime(dat$date, tz = "UTC")
dat<-  dat %>%
rename(x = easting, y = northing) %>%
mutate(across(c('z.map','z.post.thresh','z.post.max'), factor,
levels = c("Slow-Turn","Slow-Unif","Exploratory","Transit","Unclassified"))
)
dat$month<- month.abb[month(dat$date)]
dat$month<- factor(dat$month, levels = month.abb[c(5:12,1)])
dat$season<- ifelse(dat$month %in% month.abb[1:7], "Flood", "Dry")
dat$season<- factor(dat$season, levels = c("Flood","Dry"))
setwd("~/Documents/Snail Kite Project/Data/R Scripts/ValleLabUF/resist_avg")
## EVI
evi<- brick('GiantArm_evi_monthly.grd')
evi<- crop(evi, extent(dat %>%
summarize(xmin = min(x) - 3000,
xmax = max(x) + 3000,
ymin = min(y) - 3000,
ymax = max(y) + 3000) %>%
unlist()))
evi.s<- scale(evi)
ndwi<- brick('GiantArm_ndwi_monthly.grd')
ndwi<- crop(ndwi, evi)
ndwi.s<- scale(ndwi)
covars<- stack(ndwi$May, evi$May)
covars.df<- as.data.frame(covars, xy=T)
View(covars.df)
pairs(covars.df[,1:2])
pairs(covars.df[,3:4])
cor(covars.df[,3:4])
cor(covars.df[,3:4], na.rm=T)
covars.df<- drop_na(covars.df)
cor(covars.df[,3:4])
breaks<- seq(0, 1, by=0.01)
cols<- colorRampPalette(rev(c("00FFFF", "0000FF")))(length(
breaks)-1)
cols<- colorRampPalette(rev(c("#00FFFF", "#0000FF")))(length(
breaks)-1)
rasterVis::levelplot(ndwi, at=breaks, col.regions=cols, main="NDWI")
breaks<- seq(-0.2, 1, by=0.01)
cols<- colorRampPalette(c("#00FFFF", "#0000FF"))(length(
breaks)-1)
rasterVis::levelplot(ndwi, at=breaks, col.regions=cols, main="NDWI")
library(tidyverse)
library(sf)
library(raster)
library(lubridate)
library(sp)
library(furrr)
library(future)
source('helper functions.R')
#############################
setwd("~/Documents/Snail Kite Project/Data/R Scripts/acceleration")
dat<- read.csv('Giant Armadillo state estimates.csv', as.is = T)
dat$date<- as_datetime(dat$date, tz = "UTC")
dat<-  dat %>%
rename(x = easting, y = northing) %>%
mutate(across(c('z.map','z.post.thresh','z.post.max'), factor,
levels = c("Slow-Turn","Slow-Unif","Exploratory","Transit","Unclassified"))
)
dat$month<- month.abb[month(dat$date)]
dat$month<- factor(dat$month, levels = month.abb[c(5:12,1)])
dat$season<- ifelse(dat$month %in% c(month.abb[3:5]), "Fall",
ifelse(dat$month %in% c(month.abb[6:8]), "Winter",
ifelse(dat$month %in% c(month.abb[9:11]), "Spring", "Summer")))
dat$season<- factor(dat$season, levels = c("Fall","Winter","Spring","Summer"))
#Elevation
dem<- raster('giantarm_dem.tif')
names(dem)<- 'elev'
dem
setwd("~/Documents/Snail Kite Project/Data/R Scripts/ValleLabUF/resist_avg")
evi<- brick('GiantArm_evi_monthly.grd')
dem<- resample(dem, evi, method = "bilinear")
covars<- stack(dem, evi)
covars.df<- as.data.frame(covars, xy=T)
View(covars.df)
covars.df<- drop_na(covars.df)
plot(dem)
plot(evi)
cor(covars.df[,3:12])
