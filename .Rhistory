source('slice_b_gamma.R')
sourceCpp('resist_aux.cpp')
dat<- read.csv("S Armadillo Resistance Data.csv")
View(dat)
ind<- c(2,3,4,8)
xmat=data.matrix(cbind(1,dat[,ind]))
View(xmat)
seg.id=dat$seg.id
ngroup=4
tmp=unique(dat[,c('seg.id','dt')])
cond=!is.na(tmp$dt)
ysoma=tmp[cond,'dt']
ngibbs=1000
nburn=ngibbs/2
w=0.1
MaxIter=100
#priors
gamma1=0.1
var.betas=c(100,rep(10,ncol(xmat)-1))
mod.res=gibbs_resist(ysoma=ysoma,xmat=xmat,seg.id=seg.id,ngroup=ngroup,
ngibbs=ngibbs,nburn=nburn,var.betas=var.betas,
gamma1=gamma1,w=w,MaxIter=MaxtIter)
View(dat)
library(Rcpp)
library(mvtnorm)
library(dplyr)
library(ggplot2)
library(tictoc)
set.seed(1)
source('gibbs_resist.R')
source('gibbs_resist_func.R')
source('slice_b_gamma.R')
sourceCpp('resist_aux.cpp')
# dat<- read.csv('Armadillo Resistance Data.csv', as.is=T)
path.N<- read.csv('N Armadillo Resistance Data.csv', as.is=T)
path.S<- read.csv('S Armadillo Resistance Data.csv', as.is=T)
library(Rcpp)
library(mvtnorm)
library(dplyr)
library(ggplot2)
library(tictoc)
set.seed(1)
source('gibbs_resist.R')
source('gibbs_resist_func.R')
source('slice_b_gamma.R')
sourceCpp('resist_aux.cpp')
# dat<- read.csv('Armadillo Resistance Data.csv', as.is=T)
path.N<- read.csv('N Armadillo Resistance Data.csv', as.is=T)
path.S<- read.csv('S Armadillo Resistance Data.csv', as.is=T)
#analyze sites separately
path.N.scaled<- path.N %>%
mutate_at(c("dist2rd","ndvi","lunar"), ~scale(., center = TRUE, scale = TRUE))
path.S.scaled<- path.S %>%
mutate_at(c("dist2rd","ndvi","lunar"), ~scale(., center = TRUE, scale = TRUE))
ind=grep(paste(c("dist2rd","ndvi","lunar"), collapse="|"), names(path.N.scaled))
xmat=data.matrix(cbind(1, path.N.scaled[,ind]))
#check seg.id
seg.id=path.N.scaled$seg.id
k=unique(seg.id)
unique(k-c(1:max(k)))
#get y soma
tmp=unique(path.N.scaled[,c('seg.id','dt')])
ysoma<- tmp %>%
tidyr::drop_na() %>%
dplyr::pull(dt)
#model args
ngibbs=5000
nburn=ngibbs/2
w=0.1
MaxIter=100
#priors
gamma1=0.1
var.betas=c(100,rep(1,ncol(xmat)-1))
#2-state model
ngroup=2
tic()
res.N_2states<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id, ngroup = ngroup,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
gamma1 = gamma1, w = w, MaxIter = MaxtIter)
toc()
library(Rcpp)
library(mvtnorm)
library(dplyr)
library(ggplot2)
library(tictoc)
set.seed(1)
source('gibbs_resist.R')
source('gibbs_resist_func.R')
source('slice_b_gamma.R')
sourceCpp('resist_aux.cpp')
path.N<- read.csv('N Armadillo Resistance Data.csv', as.is=T)
path.S<- read.csv('S Armadillo Resistance Data.csv', as.is=T)
# #set to mean = 0 and sd = 1
# dat<- dat %>%
#   mutate_at(c("dist2rd","elev","ndvi","lunar"), ~scale(., center = TRUE, scale = TRUE))
#analyze sites separately
path.N.scaled<- path.N %>%
mutate_at(c("dist2rd","ndvi","lunar"), ~scale(., center = TRUE, scale = TRUE))
path.S.scaled<- path.S %>%
mutate_at(c("dist2rd","ndvi","lunar"), ~scale(., center = TRUE, scale = TRUE))
ind=grep(paste(c("dist2rd","ndvi","lunar"), collapse="|"), names(path.N.scaled))
xmat=data.matrix(cbind(1, path.N.scaled[,ind]))
#check seg.id
seg.id=path.N.scaled$seg.id
k=unique(seg.id)
unique(k-c(1:max(k)))
#get y soma
tmp=unique(path.N.scaled[,c('seg.id','dt')])
ysoma<- tmp %>%
tidyr::drop_na() %>%
dplyr::pull(dt)
#model args
ngibbs=5000
nburn=ngibbs/2
w=0.1
MaxIter=100
gamma1=0.1
var.betas=c(100,rep(1,ncol(xmat)-1))
#2-state model
ngroup=2
tic()
res.N_2states<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id, ngroup = ngroup,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
gamma1 = gamma1, w = w, MaxIter = MaxtIter)
toc()
1198/60
#3-state model
ngroup=3
gibbs_resist=function(ysoma,xmat,seg.id,ngroup,ngibbs,nburn,gamma1,var.betas,w,MaxIter){
n=nrow(xmat)
nparam=ncol(xmat)
nagg=length(ysoma)
#initial parameters
betas=matrix(0,nparam,ngroup)
b.gamma=1
z=sample(1:ngroup,size=nagg,replace=T)
theta=rep(1/ngroup,ngroup)
tmp=diag(1,nparam)
#for joint sampling of betas
var1=list()
for (jj in 1:ngroup){
var1[[jj]]=tmp
}
ind.betas=matrix(1:(nparam*ngroup),nparam,ngroup)
#stuff for gibbs sampler
jump1=list(betas=matrix(0.1,nparam,ngroup),betas.joint=rep(1,ngroup))
accept1=list(betas=matrix(0,nparam,ngroup),betas.joint=rep(0,ngroup))
accept.output=50
store.betas=matrix(NA,ngibbs,nparam*ngroup)
store.b=matrix(NA,ngibbs,1)
store.theta=matrix(NA,ngibbs,ngroup)
store.llk=matrix(NA,ngibbs,1)
#progress bar
pb<- progress::progress_bar$new(
format = " iteration (:current/:total) [:bar] :percent [Elapsed: :elapsed, Remaining: :eta]",
total = ngibbs, clear = FALSE, width = 100)
for (i in 1:ngibbs){
pb$tick()  #create progress bar
#sample betas
tmp=sample.betas(betas=betas,xmat=xmat,ysoma=ysoma,jump=jump1$betas,
b.gamma=b.gamma,nparam=nparam,var.betas=var.betas,
seg.id=seg.id,ngroup=ngroup,nagg=nagg,z=z)
betas=tmp$betas
accept1$betas=accept1$betas+tmp$accept
tmp=sample.betas.joint(betas=betas,xmat=xmat,ysoma=ysoma,
b.gamma=b.gamma,nparam=nparam,var.betas=var.betas,
seg.id=seg.id,ngroup=ngroup,nagg=nagg,z=z,var1=var1)
betas=tmp$betas
accept1$betas.joint=accept1$betas.joint+tmp$accept
# betas=betas.true
#sample b.gamma
b.gamma=Sample_bgamma(ngroups=ngroup,nparam=nparam,xmat=xmat,
z=z,ysoma=ysoma,betas=betas,b.gamma=b.gamma,
w=w,MaxIter=100,seg.id=seg.id,nagg=nagg)
# b.gamma=b.true
#sample z
z=sample.z(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,
seg.id=seg.id,ngroup=ngroup,nagg=nagg,theta=theta)
# z=z.true
#sample theta
theta=rep(1/ngroup,ngroup)
#get llk
p=get.llk(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,
seg.id=seg.id,ngroup=ngroup,nagg=nagg)
#sum the loglikel for the correct group
llk1=GetSomaLlkGroups(llk=p, z=z-1, ngroups=ngroup)
#adaptation MH algorithm
if (i<nburn & i%%accept.output==0){
k=print.adapt(accept1z=accept1,jump1z=jump1,accept.output=accept.output)
accept1=k$accept1
jump1=k$jump1
#get correlation structure from posterior samples
for (jj in 1:ngroup){
seq1=(i-accept.output+1):(i-1)
var1[[jj]]=var(store.betas[seq1,ind.betas[,jj]])
}
}
#store results
store.betas[i,]=betas
store.b[i]=b.gamma
store.llk[i]=sum(llk1)
store.theta[i,]=theta
z.estim=z
}
list(betas=store.betas,b.gamma=store.b,llk=store.llk,
z.estim=z,theta=store.theta)
}
tic()
res.N_3states<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id, ngroup = ngroup,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
gamma1 = gamma1, w = w, MaxIter = MaxtIter)
toc()
ind=grep(paste(c("dist2rd","ndvi","lunar"), collapse="|"), names(path.S.scaled))
xmat=data.matrix(cbind(1, path.S.scaled[,ind]))
#check seg.id
seg.id=path.S.scaled$seg.id
k=unique(seg.id)
unique(k-c(1:max(k)))
#get y soma
tmp=unique(path.S.scaled[,c('seg.id','dt')])
ysoma<- tmp %>%
tidyr::drop_na() %>%
dplyr::pull(dt)
#model args
ngibbs=5000
nburn=ngibbs/2
w=0.1
MaxIter=100
#priors
gamma1=0.1
var.betas=c(100,rep(1,ncol(xmat)-1))
#2-state model
ngroup=2
tic()
res.S_2states<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id, ngroup = ngroup,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
gamma1 = gamma1, w = w, MaxIter = MaxtIter)
toc()
430/60
#3-state model
ngroup=3
tic()
res.S_3states<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id, ngroup = ngroup,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
gamma1 = gamma1, w = w, MaxIter = MaxtIter)
toc()
rm(list=ls())
set.seed(18)
n=50000
nparam=3
xmat=matrix(runif(n*nparam,min=-2,max=2),n,nparam)
nomes.cov=paste0('covs',1:nparam)
colnames(xmat)=nomes.cov
n=nrow(xmat)
betas.true=betas=runif(nparam+1)
media=exp(cbind(1,xmat)%*%betas); range(round(media,3))
b.true=b=4
a=b*media
ymat=rgamma(n,a,b)
fim=as.data.frame(xmat)
fim$ysoma=NA
fim$seg.id=NA
#aggregate these data
ind=floor(c(seq(from=1,to=n,by=n/5000),n+1)) #has to include 1 and n to use all observations
for (i in 2:length(ind)){
seq1=ind[i-1]:(ind[i]-1)
n=length(seq1)
fim$seg.id[seq1]=i-1
ysoma=ymat[seq1]
fim$ysoma[ind[i]-1]=sum(ysoma)
}
max(fim$seg.id)
length(unique(fim$seg.id))
range(fim$ysoma,na.rm=T)
set.seed(92)
source('gibbs_resist.R')
source('gibbs_resist_func.R')
source('slice_b_gamma.R')
sourceCpp('resist_aux.cpp')
library('Rcpp')
library('mvtnorm')
set.seed(92)
source('gibbs_resist.R')
source('gibbs_resist_func.R')
source('slice_b_gamma.R')
sourceCpp('resist_aux.cpp')
dat=read.csv('fake data.csv',as.is=T)
View(dat)
ind=grep('cov',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
seg.id=dat$seg.id
#get y soma
tmp=unique(dat[,c('seg.id','ysoma')])
cond=!is.na(tmp$ysoma)
ysoma=tmp[cond,'ysoma']
ngibbs=1000
nburn=ngibbs/2
w=0.1
MaxIter=100
#priors
var.betas=c(100,rep(10,ncol(xmat)-1))
mod.res=gibbs_resist(ysoma=ysoma,xmat=xmat,seg.id=seg.id,
ngibbs=ngibbs,nburn=nburn,var.betas=var.betas,
w=w,MaxIter=MaxtIter)
store.llk=mod.res$llk
store.b=mod.res$b.gamma
store.betas=mod.res$betas
store.theta=mod.res$theta
#look at correlation
k=cor(cbind(store.b,store.betas))
k[k < 0.5 & k > -0.5]=NA
k
#look at overall convergence
par(mfrow=c(1,1))
plot(store.llk,type='l')
nburn=500
abline(v=nburn,col='red')
plot(store.llk[nburn:ngibbs],type='l')
#look at convergence betas
par(mfrow=c(2,2),mar=rep(1,4))
for (i in 1:4) plot(store.betas[1:ngibbs,i],type='l')
for (i in 1:4) plot(store.betas[nburn:ngibbs,i],type='l')
#look at convergence of b.gammas
par(mfrow=c(1,1))
plot(store.b,type='l')
abline(h=b.true,col='red')
#look at betas
par(mfrow=c(1,1),mar=rep(3,4))
betas.estim=store.betas[ngibbs,]
rango=range(c(betas.estim,betas.true))
plot(betas.true,betas.estim,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
library(Rcpp)
library(mvtnorm)
library(dplyr)
library(ggplot2)
library(tictoc)
set.seed(1)
source('gibbs_resist.R')
source('gibbs_resist_func.R')
source('slice_b_gamma.R')
sourceCpp('resist_aux.cpp')
# dat<- read.csv('Armadillo Resistance Data.csv', as.is=T)
path.N<- read.csv('N Armadillo Resistance Data.csv', as.is=T)
path.S<- read.csv('S Armadillo Resistance Data.csv', as.is=T)
#analyze sites separately
path.N.scaled<- path.N %>%
mutate_at(c("dist2rd","ndvi","lunar"), ~scale(., center = TRUE, scale = TRUE))
path.S.scaled<- path.S %>%
mutate_at(c("dist2rd","ndvi","lunar"), ~scale(., center = TRUE, scale = TRUE))
ind=grep(paste(c("dist2rd","ndvi","lunar"), collapse="|"), names(path.N.scaled))
xmat=data.matrix(cbind(1, path.N.scaled[,ind]))
#check seg.id
seg.id=path.N.scaled$seg.id
k=unique(seg.id)
unique(k-c(1:max(k)))
#get y soma
tmp=unique(path.N.scaled[,c('seg.id','dt')])
ysoma<- tmp %>%
tidyr::drop_na() %>%
dplyr::pull(dt)
#model args
ngibbs=1000
nburn=ngibbs/2
w=0.1
MaxIter=100
#priors
var.betas=c(100,rep(10,ncol(xmat)-1))
mod.res_N<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
w = w, MaxIter = MaxtIter)
View(mod.res_N)
store.llk_N<- mod.res_N$llk
store.b_N<- mod.res_N$b.gamma
store.betas_N<- mod.res_N$betas
#look at overall convergence
plot(store.llk_N, type='l')
nburn=500
abline(v=nburn,col='red')
plot(store.llk_N[(nburn + 1):ngibbs], type='l')
acf(store.llk_N[(nburn + 1):ngibbs])
plot(store.b_N, type='l')
plot(store.b_N[(nburn + 1):ngibbs], type='l')
acf(store.b_N[(nburn + 1):ngibbs])
nbetas_N<- ncol(mod.res_N$betas)
#look at convergence betas
par(mfrow=c(2,2))
nbetas_N<- ncol(mod.res_N$betas)
for (i in 1:nbetas_N){
plot(mod.res_N$betas[,i], type='l')
}
for (i in 1:nbetas_N){
plot(mod.res_N$betas[(nburn + 1):ngibbs, i], type='l')
}
par(mfrow=c(1,1),mar=rep(3,4))
#look at betas (convert to data frame)
store.betas_N.df<- data.frame(store.betas_N[(nburn+1):ngibbs, ])
names(store.betas_N.df)
store.betas.long_N<- tidyr::pivot_longer(store.betas_N.df, names_to = "betas")
store.betas.long_N<- tidyr::pivot_longer(store.betas_N.df, cols = names(store.betas_N.df),
names_to = "betas")
View(store.betas.long_N)
#look at betas (convert to data frame)
store.betas_N.df<- data.frame(store.betas_N[(nburn+1):ngibbs, ])
names(store.betas_N.df)<- c("int","dist2rd","ndvi","lunar")
store.betas.long_N<- tidyr::pivot_longer(store.betas_N.df, cols = names(store.betas_N.df),
names_to = "betas")
store.betas.long_N$betas<- factor(store.betas.long_N$betas,
levels = names(store.betas_N.df)[1:4])
ggplot(store.betas.long_N, aes(x=betas, y=value)) +
geom_boxplot(aes(color=group)) +
scale_color_brewer("Behavior", palette = "Dark2") +
geom_hline(yintercept = 0, size = 0.5) +
labs(x="Beta Coefficients", y="Value", title = "North Pantanal") +
theme_bw() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12))
ggplot(store.betas.long_N, aes(x=betas, y=value)) +
geom_boxplot(color="firebrickred") +
geom_hline(yintercept = 0, size = 0.5) +
labs(x="Beta Coefficients", y="Value", title = "North Pantanal") +
theme_bw() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12))
ggplot(store.betas.long_N, aes(x=betas, y=value)) +
geom_boxplot(color="firebrick") +
geom_hline(yintercept = 0, size = 0.5) +
labs(x="Beta Coefficients", y="Value", title = "North Pantanal") +
theme_bw() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12))
ind=grep(paste(c("dist2rd","ndvi","lunar"), collapse="|"), names(path.S.scaled))
xmat=data.matrix(cbind(1, path.S.scaled[,ind]))
#check seg.id
seg.id=path.S.scaled$seg.id
k=unique(seg.id)
unique(k-c(1:max(k)))
#get y soma
tmp=unique(path.S.scaled[,c('seg.id','dt')])
ysoma<- tmp %>%
tidyr::drop_na() %>%
dplyr::pull(dt)
ngibbs=1000
nburn=ngibbs/2
w=0.1
MaxIter=100
#priors
var.betas=c(100,rep(10,ncol(xmat)-1))
mod.res_S<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
w = w, MaxIter = MaxtIter)
store.llk_S<- mod.res_S$llk
store.b_S<- mod.res_S$b.gamma
store.betas_S<- mod.res_S$betas
#look at overall convergence
plot(store.llk_S, type='l')
store.llk_S<- mod.res_S$llk
store.b_S<- mod.res_S$b.gamma
store.betas_S<- mod.res_S$betas
#look at overall convergence
plot(store.llk_S, type='l')
nburn=500
abline(v=nburn, col='red')
plot(store.llk_S[(nburn + 1):ngibbs], type='l')
acf(store.llk_S[(nburn + 1):ngibbs])
plot(store.b_S, type='l')
plot(store.b_S[(nburn + 1):ngibbs], type='l')
acf(store.b_S[(nburn + 1):ngibbs])
#look at convergence betas
par(mfrow=c(2,2))
nbetas_S<- ncol(mod.res_S$betas)
for (i in 1:nbetas_S){
plot(mod.res_S$betas[,i], type='l')
}
for (i in 1:nbetas_S){
plot(mod.res_S$betas[(nburn + 1):ngibbs, i], type='l')
}
par(mfrow=c(1,1),mar=rep(3,4))
#look at betas (convert to data frame)
store.betas_S.df<- data.frame(store.betas_S[(nburn+1):ngibbs, ])
names(store.betas_S.df)<- c("int","dist2rd","ndvi","lunar")
store.betas.long_S<- tidyr::pivot_longer(store.betas_S.df, cols = names(store.betas_S.df),
names_to = "betas")
store.betas.long_S$betas<- factor(store.betas.long_S$betas,
levels = names(store.betas_S.df)[1:4])
ggplot(store.betas.long_S, aes(x=betas, y=value)) +
geom_boxplot(color="cadetblue1") +
geom_hline(yintercept = 0, size = 0.5) +
labs(x="Beta Coefficients", y="Value", title = "South Pantanal") +
theme_bw() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12))
ggplot(store.betas.long_S, aes(x=betas, y=value)) +
geom_boxplot(color="cyan2") +
geom_hline(yintercept = 0, size = 0.5) +
labs(x="Beta Coefficients", y="Value", title = "South Pantanal") +
theme_bw() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12))
ggplot(store.betas.long_S, aes(x=betas, y=value)) +
geom_boxplot(color="darkturquoise") +
geom_hline(yintercept = 0, size = 0.5) +
labs(x="Beta Coefficients", y="Value", title = "South Pantanal") +
theme_bw() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12))
