install.packages("momentuHMM")
install.packages("momentuHMM")
install.packages("momentuHMM")
set.seed(1)
library(tidyverse)
library(momentuHMM)
library(lubridate)
library(tictoc)
setwd("~/Documents/Snail Kite Project/Data/armadillos")
dat<- read.csv("Modified Armadillo Data.csv", header = T, sep = ",")
dat$id<- as.character(dat$id)
dat$date<- as_datetime(dat$date)
#add noise to burrow locs
tmp<- which(dat$InBurrow == 1)
dat$x[tmp]<- dat$x[tmp] + runif(length(tmp), -0.5,0.5)
dat$y[tmp]<- dat$y[tmp] + runif(length(tmp), -0.5,0.5)
#prep data for use by `momentuHMM`
dat<- dat %>% rename(ID = id)
dat.prep<- prepData(dat, type = "UTM", coordNames = c("x", "y"))
View(dat.prep)
dat.prep<-  dat.prep[dat.prep$dt == 300,]
stateNames <- c("Burrow","Active")
whichzero <- which(dat.prep$step == 0)
propzero <- length(whichzero)/nrow(dat.prep)
zeromass0 <- c(propzero, 0)        #for zero distances by state
# Step length mean
stepMean0 <- c(0.25, 25)
# Step length standard deviation
stepSD0 <- c(0.1, 25)
# # Step length shape
# stepShape0<- c(1, 1)
# # Step length scale
# stepScale0<- c(0.5, 10)
# # Turning angle mean
angleMean0 <- c(pi, 0)
# Turning angle concentration
angleCon0 <- c(0.8, 0.8)
# Fit model
if(propzero > 0) {  #don't include zero mass if no 0s present
stepPar0 <- c(stepMean0, stepSD0, zeromass0)
} else {
stepPar0 <- c(stepMean0, stepSD0)
}
anglePar0 <- c(angleMean0, angleCon0)
tic()
mod.res2<- fitHMM(data = dat.prep, nbStates = 2,
Par0 = list(step = stepPar0, angle = anglePar0),
dist = list(step = "gamma", angle = "wrpcauchy"),
formula = ~ 1, stationary=TRUE, #stationary for a slightly better fit
estAngleMean = list(angle=TRUE),
stateNames = stateNames,
# optMethod = "Nelder-Mead",
retryFits = 5)
toc()
mod.res2
plot(mod.res2)
tic()
mod.res2<- fitHMM(data = dat.prep, nbStates = 2,
Par0 = list(step = stepPar0, angle = anglePar0),
dist = list(step = "gamma", angle = "wrpcauchy"),
formula = ~ 1, stationary=TRUE, #stationary for a slightly better fit
estAngleMean = list(angle=TRUE),
stateNames = stateNames,
optMethod = "Nelder-Mead",
retryFits = 5)
toc()
mod.res2
plot(mod.res2)
dat<- read.csv("assigned Z MAP.csv", header = T, sep = ",")
str(dat)
dat$id<- as.character(dat$id)
dat$date<- as_datetime(dat$date)
library(tidyverse)
library(sf)
library(raster)
library(lubridate)
library(sp)
library(tictoc)
library(lunar)
source('helper functions.R')
#
dat$date<- as_datetime(dat$date)
# Separate tracks by region (N or S)
dat.N<- dat %>% filter(region == "N")
dat.S<- dat %>% filter(region == "S")
setwd("~/Documents/Snail Kite Project/Data/armadillos/Environ Data")
rast<- dir(getwd(), "*.tif$")
for (i in rast) assign(i, raster(i))
#Need to project rasters same as tracks
EucDist_cerc_Copy.tif<- projectRaster(EucDist_cerc_Copy.tif, crs = "+init=epsg:32721")
crs(EucDist_cercaAm.tif)<- crs(EucDist_cerc_Copy.tif)
## Aggregate spatial data to same scale (which will likely be 30m)
res(EucDist_cercaAm.tif) #1m 1m
dist2rdS_30m<- raster::aggregate(EucDist_cercaAm.tif,
fact = 30,
fun = mean)
res(EucDist_cerc_Copy.tif) #13m 13m
#create dummy raster at same extent and proj, but with desired resolution
ex.ras<- raster(ext = extent(EucDist_cerc_Copy.tif), crs = "+init=epsg:32721", res = 30)
dist2rdN_30m<- resample(EucDist_cerc_Copy.tif, ex.ras, method = "bilinear")
#resample DEMs to 30m from 18m; they will now share the same dimensions and extent
dem.N<- resample(dem_N.tif, dist2rdN_30m, method = "bilinear")
compareRaster(dist2rdN_30m, dem.N)  #check if same extent, dimensions, projection, resolution,
#and origin
plot(dist2rdN_30m); plot(dem.N, add=T); points(dat.N$x, dat.N$y)
#resample DEMs to 30m from 18m; they will now share the same dimensions and extent
dem.S<- resample(dem_S.tif, dist2rdS_30m, method = "bilinear")
compareRaster(dist2rdS_30m, dem.S)
plot(dist2rdS_30m); plot(dem.S, add=T); points(dat.S$x, dat.S$y)
setwd("~/Documents/Snail Kite Project/Data/armadillos/NDVI")
#load files
ndvi.filenames<- list.files(getwd(), pattern = "*.grd$")
ndvi.N<- brick(ndvi.filenames[1])
ndvi.S<- brick(ndvi.filenames[2])
#change extent and dimensions of RasterBricks using resample()
ndvi.N<- resample(ndvi.N, dist2rdN_30m, method = "bilinear")
compareRaster(dist2rdN_30m, ndvi.N)
plot(dist2rdN_30m); plot(ndvi.N[[1]], add=T); points(dat.N$x, dat.N$y)
#change extent and dimensions of RasterBricks using resample()
ndvi.S<- resample(ndvi.S, dist2rdS_30m, method = "bilinear")
compareRaster(dist2rdS_30m, ndvi.S)
plot(dist2rdS_30m); plot(ndvi.S[[1]], add=T); points(dat.S$x, dat.S$y)
### *TEMPORARY* take mean NDVI for all rasters over study period at each site
ndvi.N.mean<- mean(ndvi.N, na.rm = T)
ndvi.S.mean<- mean(ndvi.S, na.rm = T)
covars.N<- brick(dist2rdN_30m, dem.N, ndvi.N.mean)
names(covars.N)<- c("dist2rd", "elev", "ndvi")
covars.S<- brick(dist2rdS_30m, dem.S, ndvi.S.mean)
names(covars.S)<- c("dist2rd", "elev", "ndvi")
tic()
path.N<- extract.covars(dat.N, covars.N)
toc()
tic()
path.S<- extract.covars(dat.S, covars.S)
toc()
path.N$lunar<- lunar.illumination(path.N$date, shift = 12)
path.S$lunar<- lunar.illumination(path.S$date, shift = 12)
PerformanceAnalytics::chart.Correlation(path.N[,c(2:4,8)])  #no strong corrs
PerformanceAnalytics::chart.Correlation(path.S[,c(2:4,8)])  #strong corr between dist2rd and elev
library(Rcpp)
library(mvtnorm)
library(dplyr)
library(ggplot2)
library(tictoc)
set.seed(1)
source('gibbs_resist.R')
source('gibbs_resist_func.R')
source('slice_b_gamma.R')
sourceCpp('resist_aux.cpp')
# Export data
setwd("~/Documents/Snail Kite Project/Data/R Scripts/ValleLabUF/resist")
library(Rcpp)
library(mvtnorm)
library(dplyr)
library(ggplot2)
library(tictoc)
set.seed(1)
source('gibbs_resist.R')
source('gibbs_resist_func.R')
source('slice_b_gamma.R')
sourceCpp('resist_aux.cpp')
#analyze sites separately
path.N.scaled<- path.N %>%
mutate_at(c("dist2rd","ndvi","lunar"), ~scale(., center = TRUE, scale = TRUE))
path.S.scaled<- path.S %>%
mutate_at(c("dist2rd","ndvi","lunar"), ~scale(., center = TRUE, scale = TRUE))
ind<- grep(paste(c("dist2rd","ndvi","lunar"), collapse="|"), names(path.N.scaled))
xmat<- data.matrix(cbind(1, path.N.scaled[,ind]))
#check seg.id
seg.id<- path.N.scaled$seg.id
k<- unique(seg.id)
unique(k-c(1:max(k)))
#get y soma
tmp<- unique(path.N.scaled[,c('seg.id','dt')])
ysoma<- tmp %>%
tidyr::drop_na() %>%
dplyr::pull(dt)
#model args
ngibbs<- 1000
nburn<- ngibbs/2
w<- 0.1
MaxIter<- 100
#priors
var.betas<- c(100,rep(10,ncol(xmat)-1))
mod.res_N<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
w = w, MaxIter = MaxtIter)
ind<- grep(paste(c("dist2rd","ndvi","lunar"), collapse="|"), names(path.S.scaled))
xmat<- data.matrix(cbind(1, path.S.scaled[,ind]))
#check seg.id
seg.id<- path.S.scaled$seg.id
k<- unique(seg.id)
unique(k-c(1:max(k)))
#get y soma
tmp<- unique(path.S.scaled[,c('seg.id','dt')])
ysoma<- tmp %>%
tidyr::drop_na() %>%
dplyr::pull(dt)
#model args
ngibbs<- 1000
nburn<- ngibbs/2
w<- 0.1
MaxIter<- 100
#priors
var.betas<- c(100,rep(10,ncol(xmat)-1))
mod.res_S<- gibbs_resist(ysoma = ysoma, xmat = xmat, seg.id = seg.id,
ngibbs = ngibbs, nburn = nburn, var.betas = var.betas,
w = w, MaxIter = MaxtIter)
store.llk_N<- mod.res_N$llk
store.b_N<- mod.res_N$b.gamma
store.betas_N<- mod.res_N$betas
#look at overall convergence
plot(store.llk_N, type='l')
nburn=500
abline(v=nburn, col='red')
plot(store.llk_N[(nburn + 1):ngibbs], type='l')
acf(store.llk_N[(nburn + 1):ngibbs])
plot(store.b_N, type='l')
plot(store.b_N[(nburn + 1):ngibbs], type='l')
acf(store.b_N[(nburn + 1):ngibbs])
#look at convergence betas
par(mfrow=c(2,2))
nbetas_N<- ncol(mod.res_N$betas)
for (i in 1:nbetas_N){
plot(mod.res_N$betas[,i], type='l')
}
for (i in 1:nbetas_N){
plot(mod.res_N$betas[(nburn + 1):ngibbs, i], type='l')
}
par(mfrow=c(1,1),mar=rep(3,4))
#look at betas (convert to data frame)
store.betas_N.df<- data.frame(store.betas_N[(nburn+1):ngibbs, ])
names(store.betas_N.df)<- c("int","dist2rd","ndvi","lunar")
store.betas.long_N<- tidyr::pivot_longer(store.betas_N.df, cols = names(store.betas_N.df),
names_to = "betas")
store.betas.long_N$betas<- factor(store.betas.long_N$betas,
levels = names(store.betas_N.df)[1:4])
ggplot(store.betas.long_N, aes(x=betas, y=value)) +
geom_boxplot(color="firebrick") +
geom_hline(yintercept = 0, size = 0.5) +
labs(x="Beta Coefficients", y="Value", title = "North Pantanal") +
theme_bw() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12))
View(store.betas.long_N)
# w/o intercept
ggplot(store.betas.long_N %>% filter(!= "int"), aes(x=betas, y=value)) +
geom_boxplot(color="firebrick") +
geom_hline(yintercept = 0, size = 0.5) +
labs(x="Beta Coefficients", y="Value", title = "North Pantanal") +
theme_bw() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12))
# w/o intercept
ggplot(store.betas.long_N %>% filter(betas != "int"), aes(x=betas, y=value)) +
geom_boxplot(color="firebrick") +
geom_hline(yintercept = 0, size = 0.5) +
labs(x="Beta Coefficients", y="Value", title = "North Pantanal") +
theme_bw() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12))
store.llk_S<- mod.res_S$llk
store.b_S<- mod.res_S$b.gamma
store.betas_S<- mod.res_S$betas
#look at overall convergence
plot(store.llk_S, type='l')
nburn=500
abline(v=nburn, col='red')
plot(store.llk_S[(nburn + 1):ngibbs], type='l')
acf(store.llk_S[(nburn + 1):ngibbs])
plot(store.b_S, type='l')
plot(store.b_S[(nburn + 1):ngibbs], type='l')
acf(store.b_S[(nburn + 1):ngibbs])
#look at convergence betas
par(mfrow=c(2,2))
nbetas_S<- ncol(mod.res_S$betas)
for (i in 1:nbetas_S){
plot(mod.res_S$betas[,i], type='l')
}
for (i in 1:nbetas_S){
plot(mod.res_S$betas[(nburn + 1):ngibbs, i], type='l')
}
par(mfrow=c(1,1),mar=rep(3,4))
#look at betas (convert to data frame)
store.betas_S.df<- data.frame(store.betas_S[(nburn+1):ngibbs, ])
names(store.betas_S.df)<- c("int","dist2rd","ndvi","lunar")
store.betas.long_S<- tidyr::pivot_longer(store.betas_S.df, cols = names(store.betas_S.df),
names_to = "betas")
store.betas.long_S$betas<- factor(store.betas.long_S$betas,
levels = names(store.betas_S.df)[1:4])
ggplot(store.betas.long_S, aes(x=betas, y=value)) +
geom_boxplot(color="darkturquoise") +
geom_hline(yintercept = 0, size = 0.5) +
labs(x="Beta Coefficients", y="Value", title = "South Pantanal") +
theme_bw() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12))
# w/o intercept
ggplot(store.betas.long_S %>% filter(betas != "int"), aes(x=betas, y=value)) +
geom_boxplot(color="darkturquoise") +
geom_hline(yintercept = 0, size = 0.5) +
labs(x="Beta Coefficients", y="Value", title = "South Pantanal") +
theme_bw() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12))
covars.N
#Need to center and scale raster values so comparable to beta coeffs
covars.N[[c("dist2rd","ndvi")]]
covars.N2$dist2rd
#Need to center and scale raster values so comparable to beta coeffs
covars.N2<- covars.N[[c("dist2rd","ndvi")]]
covars.N2$dist2rd
covars.N2$dist2rd<- scale(covars.N2$dist2rd, center = T, scale = T)
covars.N2
covars.N2$ndvi<- scale(covars.N2$ndvi, center = T, scale = T)
covars.N2
View(store.betas_N.df)
#extract beta coeffs (mean)
betas_N<- colMeans(store.betas_N.df)
betas_N
betas_N["int"]
#Perform raster math using beta coeffs (include intercept and beta coeff for lunar as constants)
resist_surf_N<- betas_N["int"] +
betas_N["dist2rd"]*covars.N2$dist2rd +
betas_N["ndvi"]*covars.N2$ndvi +
betas_N["lunar"]
plot(resist_surf_N)
#Perform raster math using beta coeffs (include intercept and beta coeff for lunar as constants)
resist_surf_N<- exp(betas_N["int"] +
betas_N["dist2rd"]*covars.N2$dist2rd +
betas_N["ndvi"]*covars.N2$ndvi +
betas_N["lunar"])
plot(resist_surf_N)
resist_surf_N_df<- as.data.frame(resist_surf_N, as.xy=T)
View(resist_surf_N_df)
resist_surf_N_df<- as.data.frame(resist_surf_N, xy=T)
View(resist_surf_N_df)
summary(resist_surf_N_df)
ggplot() +
geom_tile(data = resist_surf_N_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c(option = "magma") +
theme_bw()
ggplot() +
geom_tile(data = resist_surf_N_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c(option = "magma", na.value = "n") +
theme_bw() +
coord_equal()
ggplot() +
geom_tile(data = resist_surf_N_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c(option = "inferno", na.value = "n") +
theme_bw() +
coord_equal()
ggplot() +
geom_tile(data = resist_surf_N_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c(option = "plasma", na.value = "n") +
theme_bw() +
coord_equal()
ggplot() +
geom_tile(data = resist_surf_N_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c(option = "viridis", na.value = "n") +
theme_bw() +
coord_equal()
ggplot() +
geom_tile(data = resist_surf_N_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c(option = "cividis", na.value = "n") +
theme_bw() +
coord_equal()
ggplot() +
geom_tile(data = resist_surf_N_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c(option = "inferno", na.value = "n") +
theme_bw() +
coord_equal()
ggplot() +
geom_tile(data = resist_surf_N_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c(option = "inferno", na.value = "n") +
expand_limits(x=0, y=0) +
theme_bw() +
coord_equal()
ggplot() +
geom_tile(data = resist_surf_N_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c(option = "inferno", na.value = "n") +
expand_scale(x=0, y=0) +
theme_bw() +
coord_equal()
ggplot() +
geom_tile(data = resist_surf_N_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c(option = "inferno", na.value = "n") +
expand_scale(0) +
theme_bw() +
coord_equal()
ggplot() +
geom_tile(data = resist_surf_N_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c(option = "inferno", na.value = "n") +
expansion(0) +
theme_bw() +
coord_equal()
ggplot() +
geom_tile(data = resist_surf_N_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c("Time Spent Moving (s)", option = "inferno", na.value = "n") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
theme_bw() +
coord_equal()
ggplot() +
geom_tile(data = resist_surf_N_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c("Time Spent/nMoving (s)", option = "inferno", na.value = "n") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
theme_bw() +
coord_equal()
ggplot() +
geom_tile(data = resist_surf_N_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c("Time Spent\nMoving (s)", option = "inferno", na.value = "n") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
theme_bw() +
coord_equal()
ggplot() +
geom_tile(data = resist_surf_N_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c("Time Spent\nMoving (s)", option = "inferno", na.value = "n") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(x="Easting", y="Northing", title = "North Pantanal Resistance Surface")
ggplot() +
geom_tile(data = resist_surf_N_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c("Time Spent\nMoving (s)", option = "inferno", na.value = "n") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(x="Easting", y="Northing", title = "North Pantanal Resistance Surface") +
theme_bw() +
coord_equal()
#extract beta coeffs (mean)
betas_S<- colMeans(store.betas_S.df)
#Need to center and scale raster values so comparable to beta coeffs
covars.S2<- covars.S[[c("dist2rd","ndvi")]]
covars.S2$dist2rd<- scale(covars.S2$dist2rd, center = T, scale = T)
covars.S2$ndvi<- scale(covars.S2$ndvi, center = T, scale = T)
#Perform raster math using beta coeffs (include intercept and beta coeff for lunar as constants)
resist_surf_S<- exp(
betas_S["int"] +
betas_S["dist2rd"]*covars.S2$dist2rd +
betas_S["ndvi"]*covars.S2$ndvi +
betas_S["lunar"]
)
resist_surf_S_df<- as.data.frame(resist_surf_S, xy=T)
plot(resist_surf_S)
ggplot() +
geom_tile(data = resist_surf_S_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c("Time Spent\nMoving (s)", option = "inferno", na.value = "n") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(x="Easting", y="Northing", title = "South Pantanal Resistance Surface") +
theme_bw() +
coord_equal()
View(path.N)
n_distinct(dat.N$id)
ggplot() +
geom_tile(data = resist_surf_N_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c("Time Spent\nMoving (s)", option = "inferno", na.value = "n") +
geom_path(dat.N, aes(x, y, color = id, group = id)) +
scale_color_brewer(palette = "Dark2") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(x="Easting", y="Northing", title = "North Pantanal Resistance Surface") +
theme_bw() +
coord_equal()
ggplot() +
geom_tile(data = resist_surf_N_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c("Time Spent\nMoving (s)", option = "inferno", na.value = "n") +
geom_path(data = dat.N, aes(x, y, color = id, group = id)) +
scale_color_brewer(palette = "Dark2") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(x="Easting", y="Northing", title = "North Pantanal Resistance Surface") +
theme_bw() +
coord_equal()
ggplot() +
geom_tile(data = resist_surf_N_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c("Time Spent\nMoving (s)", option = "inferno", na.value = "n") +
geom_path(data = dat.N, aes(x, y, color = id, group = id)) +
# scale_color_brewer(palette = "Dark2") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(x="Easting", y="Northing", title = "North Pantanal Resistance Surface") +
theme_bw() +
coord_equal()
ggplot() +
geom_tile(data = resist_surf_N_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c("Time Spent\nMoving (s)", option = "inferno", na.value = "n") +
geom_point(data = dat.N, aes(x, y, color = id)) +
# scale_color_brewer(palette = "Dark2") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(x="Easting", y="Northing", title = "North Pantanal Resistance Surface") +
theme_bw() +
coord_equal()
ggplot() +
geom_tile(data = resist_surf_S_df, aes(x, y, fill = layer)) +
scale_fill_viridis_c("Time Spent\nMoving (s)", option = "inferno", na.value = "n") +
geom_point(data = dat.S, aes(x, y, color = id)) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(x="Easting", y="Northing", title = "South Pantanal Resistance Surface") +
theme_bw() +
coord_equal()
write.csv(path.N, "N Armadillo Resistance Data_dispersal.csv", row.names = F)
write.csv(path.S, "S Armadillo Resistance Data_dispersal.csv", row.names = F)
