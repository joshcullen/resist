scale()
sent2_2A_SCL$imageCol$
sort('CLOUDY_PIXEL_PERCENTAGE')
sent2_2A_SCL$imageCol$
sort('CLOUDY_PIXEL_PERCENTAGE')$
first()
sent2_2A_SCL$imageCol$
sort('CLOUDY_PIXEL_PERCENTAGE')$
first()
sent2_2A_SCL$imageCol$
sort('CLOUDY_PIXEL_PERCENTAGE')$
first()$
maskClouds(prob = 65, cdi = -0.5, buffer = 300)
test<- sent2_2A_SCL$imageCol$
sort('CLOUDY_PIXEL_PERCENTAGE')$
first()$
maskClouds(prob = 65, cdi = -0.5, buffer = 300)
N = test$select('B8')
R = test$select('B4')
B = test$select('B2')
EVI = 2.5 * (N - R) / (N + 6.0 * R - 7.5 * B + 1.0) # Overloaded operators
EVI %>% viz(band = 'EVI', min = -1, max = 1, user_shape = aoi)
EVI %>% band()
EVI %>% viz(min = -1, max = 1, user_shape = aoi)
EVI
EVI$listIndices
EVI$listIndices()
ee_print(EVI)
sent2_2A_SCL <- get_sent2(aoi,
method = 'S2_2A',
startDate = '2018-01-01',
endDate = '2020-12-31',
c.low = 6,
c.high = 11)
test<- sent2_2A_SCL$imageCol$
sort('CLOUDY_PIXEL_PERCENTAGE')$
first()$
maskClouds(prob = 65, cdi = -0.5, buffer = 300)
N = test$select('B8')
R = test$select('B4')
B = test$select('B2')
EVI = 2.5 * (N - R) / (N + 6.0 * R - 7.5 * B + 1.0) # Overloaded operators
EVI %>% viz(min = -1, max = 1, user_shape = aoi)
EVI
ee_print(EVI)
EVI$bandNames()$getInfo()
test$bandNames()$getInfo()
sent2_2A_SCL$imageCol$bandNames()$getInfo()
sent2_2A_SCL$imageCol$getInfo()
aoi
library(cptcity)
library(raster)
library(stars)
# Define a region of interest with sf
ee_roi <- st_read(system.file("shape/nc.shp", package="sf")) %>%
st_geometry() %>%
sf_as_ee()
# Search into the Earth Engineâ€™s public data archive
ee_search_dataset() %>%
ee_search_tagstitle("sentinel", "sr",logical_operator = "AND") %>%
'['(4,) %>%
ee_search_display()
dataset <- ee$ImageCollection('COPERNICUS/S2_SR')
S2_clean <- function(img) {
# Calculate the NDVI
ndvi_values <- img$normalizedDifference(c("B8","B4"))
# Extract the quality band
img_qa <- img$select("SCL")
# Create a mask considering: cloud shandows, medium&high clouds, cirrus
cloud_mask <- img_qa$eq(list(3, 8, 9, 10))$reduce(ee$Reducer$sum())$gt(0)
# Mask pixels with value zero.
ndvi_values %>%
ee$Image$updateMask(cloud_mask) %>%
ee$Image$copyProperties(img, list("system:time_start"))
}
# Create a monthly composite
ndvi_composite <- dataset$
filterDate('2019-01-01', '2019-12-31')$
filter(ee$Filter$calendarRange(1, field = "month"))$
map(S2_clean)$
median()
ee_print(ndvi_composite)
# Display results
Map$setCenter(lon = -79,lat = 35,zoom = 9)
Map$addLayer(
eeObject = ndvi_composite,
visParams = list(
min = 0.2 ,
max = 0.7 ,
palette = cpt("grass_ndvi", 10)
)
) + Map$addLayer(ee_roi)
palette = c(
'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',
'66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
'012E01', '011D01', '011301'
)
Map$addLayer(
eeObject = ndvi_composite,
visParams = list(
min = 0.2 ,
max = 0.7 ,
palette = palette
)
) + Map$addLayer(ee_roi)
ndvi_composite <- dataset$
filterDate('2019-01-01', '2019-12-31')$
filter(ee$Filter$calendarRange(1, field = "month"))$
map(S2_clean)
ee_print(ndvi_composite)
setwd("~/Documents/Snail Kite Project/Data/R Scripts/acceleration")
dat<- read.csv("Binned Armadillo Acceleration Data.csv", as.is = T)
dat$date<- as_datetime(dat$date)
# Filter out observations where coords are NA
dat<- dat %>%
filter(!is.na(x))
## Date range for giant armadillos
range(dat$date)  #2019-05-19 to 2020-01-24
#create dummy raster for AOI
rast<- raster(extent(min(dat$x) - 3000,
max(dat$x) + 3000,
min(dat$y) - 3000,
max(dat$y) + 3000),
crs = "+init=epsg:32721")
library(raster)
library(sf)
#create dummy raster for AOI
rast<- raster(extent(min(dat$x) - 3000,
max(dat$x) + 3000,
min(dat$y) - 3000,
max(dat$y) + 3000),
crs = "+init=epsg:32721")
min(dat$x)
View(dat)
# Filter out observations where coords are NA
dat<- dat %>%
filter(!is.na(x))
# Filter out observations where coords are NA
dat<- dat %>%
filter(!is.na(y))
# Filter out observations where coords are NA
dat<- dat %>%
filter(!is.na('x'))
dat<- read.csv("Binned Armadillo Acceleration Data.csv", as.is = T)
dat$date<- as_datetime(dat$date)
library(lubridate)
dat$date<- as_datetime(dat$date)
# Filter out observations where coords are NA
dat<- dat %>%
filter(!is.na(x))
names(dat)
# Filter out observations where coords are NA
dat<- dat %>%
filter(is.na(x))
dat %>%
filter(!is.na(x))
glimpse(dat)
library(tidyverse)
# Filter out observations where coords are NA
dat<- dat %>%
filter(!is.na(x))
## Date range for giant armadillos
range(dat$date)  #2019-05-19 to 2020-01-24
#create dummy raster for AOI
rast<- raster(extent(min(dat$x) - 3000,
max(dat$x) + 3000,
min(dat$y) - 3000,
max(dat$y) + 3000),
crs = "+init=epsg:32721")
bounds<- st_as_sf(data.frame(rasterToPoints(rast)), coords = c("x","y"),
crs = "+init=epsg:32721") %>%  #convert to sf object
st_bbox() %>%  #extract bounding box
st_as_sfc() %>%  #convert into polygon
sf_as_ee()  #convert into GEE format
s2<- ee$ImageCollection("COPERNICUS/S2_SR")$
filterBounds(bounds)$
filterDate('2019-05-01', '2020-01-31')$
sort("system:time_start", TRUE)$  # Sort the collection in chronological order
map(function(x) x$reproject("EPSG:32721"))$
filterMetadata('CLOUD_COVERAGE_ASSESSMENT', 'less_than', 30)
print(s2$size()$getInfo())  #check number of images (34)
# Map the NDVI and cloud mask functions; select only the NDVI band
s2_ndvi<- s2$map(S2_clean)$
# map(addNDVI)$
select('NDVI')
ee_print(s2_ndvi)
# Map the NDVI and cloud mask functions; select only the NDVI band
s2_ndvi<- s2$map(S2_clean)$
# map(addNDVI)$
select('nd')
ee_print(s2_ndvi)
print(s2_ndvi$getInfo())
nimages<- s2_ndvi$size()$getInfo()
ic_date<- ee_get_date_ic(s2_ndvi)
# Plot the map of the median NDVI for the region
Map$setCenter(-55.76664, -19.19482, 11)
Map$addLayer(s2_ndvi$first(),
visParams = list(
min = -0.5,
max = 1.0,
bands = "NDVI",
palette = c(
'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',
'66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
'012E01', '011D01', '011301'
)
))
Map$addLayer(s2_ndvi$first(),
visParams = list(
min = -0.5,
max = 1.0,
bands = "nd",
palette = c(
'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',
'66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
'012E01', '011D01', '011301'
)
))
Map$addLayer(s2_ndvi$median(),
visParams = list(
min = -0.5,
max = 1.0,
bands = "nd",
palette = c(
'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',
'66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
'012E01', '011D01', '011301'
)
))
Map$addLayer(s2_ndvi$median(),
visParams = list(
min = -1,
max = 1.0,
bands = "nd",
palette = c(
'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',
'66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
'012E01', '011D01', '011301'
)
))
S2_clean <- function(img) {
# Calculate the NDVI
ndvi_values <- img$normalizedDifference(c("B8","B4"))
# Extract the quality band
img_qa <- img$select("SCL")
# Create a mask considering: cloud shandows, medium&high clouds, cirrus
cloud_mask <- img_qa$eq(list(3, 9, 10))$reduce(ee$Reducer$sum())$gt(0)
# Mask pixels with value zero.
ndvi_values %>%
ee$Image$updateMask(cloud_mask) %>%
ee$Image$copyProperties(img, list("system:time_start"))
}
# Map the NDVI and cloud mask functions; select only the NDVI band
s2_ndvi<- s2$map(S2_clean)$
# map(addNDVI)$
select('nd')
Map$addLayer(s2_ndvi$median(),
visParams = list(
min = -1,
max = 1.0,
bands = "nd",
palette = c(
'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',
'66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
'012E01', '011D01', '011301'
)
))
library(reticulate)
eemont <- import('eemont')
library(tidyverse)
library(sf)
library(raster)
library(lubridate)
library(sp)
library(rgee)
library(rasterVis)
library(googledrive)
ee_Initialize(email = "joshcullen10@gmail.com", drive = T)
setwd("~/Documents/Snail Kite Project/Data/R Scripts/acceleration")
dat<- read.csv("Binned Armadillo Acceleration Data.csv", as.is = T)
dat$date<- as_datetime(dat$date)
# Filter out observations where coords are NA
dat<- dat %>%
filter(!is.na(x))
## Date range for giant armadillos
range(dat$date)  #2019-05-19 to 2020-01-24
#create dummy raster for AOI
rast<- raster(extent(min(dat$x) - 3000,
max(dat$x) + 3000,
min(dat$y) - 3000,
max(dat$y) + 3000),
crs = "+init=epsg:32721")
bounds<- st_as_sf(data.frame(rasterToPoints(rast)), coords = c("x","y"),
crs = "+init=epsg:32721") %>%  #convert to sf object
st_bbox() %>%  #extract bounding box
st_as_sfc() %>%  #convert into polygon
sf_as_ee()  #convert into GEE format
s2<- ee$ImageCollection("COPERNICUS/S2_SR")$
filterBounds(bounds)$
filterDate('2019-05-01', '2020-01-31')$
sort("system:time_start", TRUE)$  # Sort the collection in chronological order
map(function(x) x$reproject("EPSG:32721"))$
filterMetadata('CLOUD_COVERAGE_ASSESSMENT', 'less_than', 30)
print(s2$size()$getInfo())  #check number of images (34)
# This function calculates EVI from Sentinel-2 imagery
addEVI<- function(image) {
return(image$addBands(image$expression(
expression = '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))',
opt_map =  list(
'NIR' = image$select('B8'),
'RED' = image$select('B4'),
'BLUE' = image$select('B2')
)
)$rename('EVI')$toFloat())  #needs to be float, not double
)
}
# Map the NDVI and cloud mask functions; select only the NDVI band
s2_evi<- s2$
maskClouds(prob = 65, cdi = -0.5, buffer = 300)$
# map(maskcloud1)$
map(addEVI)$
select('EVI')
ee_print(s2_evi)
nimages<- s2_evi$size()$getInfo()
ic_date<- ee_get_date_ic(s2_evi)
# Plot the map of the median NDVI for the region
Map$setCenter(-55.76664, -19.19482, 11)
Map$addLayer(s2_evi$first(),
visParams = list(
min = -0.5,
max = 1.0,
bands = "EVI",
palette = c(
'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',
'66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
'012E01', '011D01', '011301'
)
))
pal1<- c(
'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',
'66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
'012E01', '011D01', '011301'
)
Map$centerObject(bounds, zoom = 11)
s2_img_list <- list()
for (index in seq_len(nimages)) {
py_index <- index - 1
s2_img <- ee$Image(s2_ndvi$toList(1, py_index)$get(0))
s2_img_list[[index]] <- Map$addLayer(
eeObject = s2_img,
visParams = list(min = -0.5, max = 1.0, palette = pal1),
name = ic_date$id[index]
)
}
for (index in seq_len(nimages)) {
py_index <- index - 1
s2_img <- ee$Image(s2_evi$toList(1, py_index)$get(0))
s2_img_list[[index]] <- Map$addLayer(
eeObject = s2_img,
visParams = list(min = -0.5, max = 1.0, palette = pal1),
name = ic_date$id[index]
)
}
Reduce('+', s2_img_list)
# Create a number ee$List where each element represent a month
months <- ee$List$sequence(1, 12)
# Function to Calculate a monthly composite
monthly_s2 <- function(m) {
s2_evi$filter(ee$Filter$calendarRange(m, m, "month")) %>%
ee$ImageCollection$mean() %>%
ee$Image$select("EVI")
}
s2_monthly <- months$map(ee_pyfunc(monthly_s2))
s2_monthly <- months$map(monthly_s2)
# Function to Calculate a monthly composite
monthly_s2 <- function(m) {
s2_evi$filter(ee$Filter$calendarRange(m, m, "month")) %>%
ee$ImageCollection$median() %>%
ee$Image$select("EVI")
}
s2_monthly <- months$map(monthly_s2)
# Function to Calculate a monthly composite
monthly_s2 <- function(m) {
s2_evi$filter(ee$Filter$calendarRange(m, m, "month")) %>%
ee$ImageCollection$mean() %>%
ee$Image$select("EVI")
}
s2_monthly <- months$map(ee_util_pyfunc(monthly_s2))
s2_monthly <- months$map(ee_utils_pyfunc(monthly_s2))
# Example: Display January and August median composite
s2_mean_jan <- ee$Image(s2_monthly$get(0))
s2_mean_aug <- ee$Image(s2_monthly$get(7))
## Vis parameters.
visparams <- list(
bands = "EVI",
min = -0.5,
max = 1,
palette = palette
)
Map$addLayer(s2_mean_jan, visparams, name = "Jan") +
Map$addLayer(s2_mean_aug, visparams, name = "Aug")
Map$centerObject(bounds, zoom = 11)
Map$addLayer(s2_mean_jan, visparams, name = "Jan") +
Map$addLayer(s2_mean_aug, visparams, name = "Aug")
Map$addLayer(s2_mean_jan, visparams, name = "Jan")
s2_mean_jan
ee_print(s2_mean_jan)
# Function to Calculate a monthly composite
monthly_s2 <- function(m) {
s2_evi$filter(ee$Filter$calendarRange(m, m, "month")) %>%
ee$ImageCollection$mean() #%>%
# ee$Image$select("EVI")
}
s2_monthly <- months$map(ee_utils_pyfunc(monthly_s2))
# Example: Display January and August median composite
s2_mean_jan <- ee$Image(s2_monthly$get(0))
s2_mean_aug <- ee$Image(s2_monthly$get(7))
ee_print(s2_mean_jan)
s2_mean_aug <- ee$Image(s2_monthly$get(7))
## Vis parameters.
visparams <- list(
bands = "EVI",
min = -0.5,
max = 1,
palette = palette
)
Map$centerObject(region, zoom = 10)
Map$centerObject(bounds, zoom = 11)
Map$addLayer(s2_mean_jan, visparams, name = "Jan") +
Map$addLayer(s2_mean_aug, visparams, name = "Aug")
Map$addLayer(s2_mean_jan, visparams, name = "Jan")
s2_monthly <- months$map(monthly_s2)
Map$addLayer(s2_mean_jan$first(), visparams, name = "Jan")
Map$addLayer(s2_mean_jan$median(), visparams, name = "Jan")
Map$addLayer(s2_mean_jan$mean(), visparams, name = "Jan")
# Function to Calculate a monthly composite
monthly_s2 <- function(m) {
s2_evi$filter(ee$Filter$calendarRange(m, m, "month")) %>%
ee$ImageCollection$median() #%>%
# ee$Image$select("EVI")
}
s2_monthly <- months$map(monthly_s2)
s2_monthly <- months$map(ee_utils_pyfunc(monthly_s2))
# Example: Display January and August median composite
s2_mean_jan <- ee$Image(s2_monthly$get(0))
s2_mean_aug <- ee$Image(s2_monthly$get(7))
## Vis parameters.
visparams <- list(
bands = "EVI",
min = -0.5,
max = 1,
palette = palette
)
Map$addLayer(s2_mean_jan$first(), visparams, name = "Jan")
Map$addLayer(s2_mean_jan, visparams, name = "Jan")
Map$addLayer(s2_mean_jan$Image(), visparams, name = "Jan")
Reduce('+', s2_monthly)
ee_print(s2_monthly)
ee_print(s2_mean_aug)
# Function to Calculate a monthly composite
monthly_s2 <- function(m) {
s2_evi$
filter(ee$Filter$calendarRange(m, m, "month"))$
reduce(ee$Reducer$median()) #%>%
# ee$Image$select("EVI")
}
s2_monthly <- months$map(monthly_s2)
s2_monthly <- months$map(ee_utils_pyfunc(monthly_s2))
# Example: Display January and August median composite
s2_mean_jan <- ee$Image(s2_monthly$get(0))
s2_mean_aug <- ee$Image(s2_monthly$get(7))
Map$addLayer(s2_mean_jan, visparams, name = "Jan")
s2_monthly$getInfo
s2_monthly$getInfo()
## Vis parameters.
visparams <- list(
bands = "EVI_median",
min = -0.5,
max = 1,
palette = palette
)
Map$addLayer(s2_mean_jan, visparams, name = "Jan") +
Map$addLayer(s2_mean_aug, visparams, name = "Aug")
## Vis parameters.
visparams <- list(
bands = "EVI_median",
min = -0.5,
max = 1,
palette = palette
)
Map$addLayer(s2_mean_jan, visparams, name = "Jan") +
Map$addLayer(s2_mean_aug, visparams, name = "Aug")
# Function to Calculate a monthly composite
monthly_s2 <- function(m) {
s2_evi$
filter(ee$Filter$calendarRange(m, m, "month"))$
reduce(ee$Reducer$median()) %>%
ee$Image$select("EVI_median")
}
s2_monthly <- months$map(ee_utils_pyfunc(monthly_s2))
# Example: Display January and August median composite
s2_mean_jan <- ee$Image(s2_monthly$get(0))
s2_mean_aug <- ee$Image(s2_monthly$get(7))
## Vis parameters.
visparams <- list(
bands = "EVI_median",
min = -0.5,
max = 1,
palette = palette
)
Map$addLayer(s2_mean_jan, visparams, name = "Jan") +
Map$addLayer(s2_mean_aug, visparams, name = "Aug")
