View(path.S)
#   if (path_df$cell[i] == path_df$cell[i+1])
#     ind<- c(ind, i)
# }
# ind<- c(1, ind, nrow(path_df))
#
# #Add time index to both DFs for merging
# path_df$time1<- 1:nrow(path_df)
# tm14$time1<- ind
#
# #Merge datasets
resist.dat<- rbind(path.N, path.S)
# Export data
setwd("~/Documents/Snail Kite Project/Data/R Scripts/ValleLabUF/resist")
path.S<- df.to.list(path.S, "id")
View(path.S)
View(path.S[["tm2"]])
length(path.S)
max(path.N$seg.id)
max(path.N$seg.id)
for (i in 1:length(path.S)) {
path.S[[i]]$seg.id<- path[[i]]$seg.id + max(path.N$seg.id)
}
View(path.S)
View(path.S[["tm2"]])
path.S<- df.to.list(path.S, "id")
for (i in 1:length(path.S)) {
path.S[[i]]$seg.id<- path.S[[i]]$seg.id + max(path.N$seg.id)
}
View(path.S)
View(path.S[["tm2"]])
View(path.S[["tm3"]])
path.S<- bind_rows(path.S)
View(path.S)
# #Merge datasets
resist.dat<- rbind(path.N, path.S)   ### WILL NEED TO ADJUST SEG.ID AGAIN FOR PATH.S OBS
# Export data
setwd("~/Documents/Snail Kite Project/Data/R Scripts/ValleLabUF/resist")
write.csv(resist.dat, "Armadillo Resistance Data.csv", row.names = F)
library('Rcpp')
set.seed(1)
source('gibbs_resist.R')
source('gibbs_resist_func.R')
sourceCpp('resist_aux.cpp')
dat=read.csv('Armadillo Resistance Data.csv',as.is=T)
View(dat)
dat$dist2rd<- scale(dat$dist2rd, center = TRUE, scale = TRUE)  #set to mean = 0 and sd = 1
ind=grep('dist',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
seg.id=dat$seg.id
max(seg.id)
ngroup=10
#get y soma
tmp=unique(dat[,c('seg.id','dt')])
cond=!is.na(tmp$dt)
ysoma=tmp[cond,'dt']
ngibbs=10000
nburn=ngibbs/2
#priors
gamma1=0.1
var.betas=c(100,rep(1,ncol(xmat)-1))
mod.res=gibbs_resist(ysoma=ysoma,xmat=xmat,seg.id=seg.id,ngroup=ngroup,
ngibbs=ngibbs,nburn=nburn,var.betas=var.betas,
gamma1=gamma1)
#double-check that extracted grid cells overlap with tm14 path
bar<- dist2rdN_30m
bar[]<- NA
bar[path.N$cell]<- dist2rdN_30m[path.N$cell]
plot(bar)
plot(dat.N[,c("x","y")], type = "l", add=T)
lines(dat.N[,c("x","y")])
warnings()
plot(bar)
lines(dat.N[,c("x","y")])
# plot(dat.N_sldf, add=T)
plot(st_as_sf(x = dat.N,
coords = c("x", "y"),
crs = "+init=epsg:32721"), add = T)
plot(bar)
# plot(dat.N_sldf, add=T)
plot(st_as_sf(x = dat.N,
coords = c("x", "y"),
crs = "+init=epsg:32721"), type = "l", add = T)
plot(bar)
# plot(dat.N_sldf, add=T)
plot(st_as_sf(x = dat.N,
coords = c("x", "y"),
crs = "+init=epsg:32721"),
add = T)
dev.off()
plot(bar)
# plot(dat.N_sldf, add=T)
plot(st_as_sf(x = dat.N,
coords = c("x", "y"),
crs = "+init=epsg:32721"),
add = T)
plot(bar)
# plot(dat.N_sldf, add=T)
plot(st_geometry(st_as_sf(x = dat.N,
coords = c("x", "y"),
crs = "+init=epsg:32721")),
add = T)
#S
bar<- dist2rdS_30m
bar[]<- NA
bar[path.S$cell]<- dist2rdS_30m[path.S$cell]
plot(bar)
plot(st_geometry(st_as_sf(x = dat.S,
coords = c("x", "y"),
crs = "+init=epsg:32721")),
add = T)
plot(bar)
plot(st_geometry(st_as_sf(x = dat.S,
coords = c("x", "y"),
crs = "+init=epsg:32721")),
add = T)
#N
bar<- dist2rdN_30m
bar[]<- NA
bar[path.N$cell]<- dist2rdN_30m[path.N$cell]
plot(bar)
plot(st_geometry(st_as_sf(x = dat.N,
coords = c("x", "y"),
crs = "+init=epsg:32721")),
add = T)
plot(bar)
plot(st_as_sf(x = dat.N,
coords = c("x", "y"),
crs = "+init=epsg:32721"),
add = T)
#S
bar<- dist2rdS_30m
bar[]<- NA
bar[path.S$cell]<- dist2rdS_30m[path.S$cell]
plot(bar)
plot(st_as_sf(x = dat.S,
coords = c("x", "y"),
crs = "+init=epsg:32721"),
add = T)
store.llk=mod.res$llk
length(unique(dat$id))
store.b=mod.res$b.gamma
store.betas=mod.res$betas
z.estim=mod.res$z.estim
#look at overall convergence
plot(store.llk,type='l')
#look at overall convergence
plot(store.llk,type='l')
nburn=5000
abline(v=nburn,col='red')
plot(store.llk[nburn:ngibbs],type='l')
acf(store.llk[nburn:ngibbs])
foo<- st_as_sf(x = dat.S,
coords = c("x", "y"),
crs = "+init=epsg:32721")
foo
plot(store.b,type='l')
plot(store.b[nburn:ngibbs],type='l')
acf(store.b[nburn:ngibbs])
ncol(store.betas)
#look at convergence betas
par(mfrow=c(3,3),mar=rep(1,4))
ind=sample(1:ncol(store.betas),size=9)
for (i in 1:9) plot(store.betas[1:ngibbs,ind[i]],type='l')
for (i in 1:9) plot(store.betas[nburn:ngibbs,ind[i]],type='l')
par(mfrow=c(1,1),mar=rep(3,4))
betas.estim=matrix(store.betas[ngibbs,],ncol(store.betas)/ngroup,ngroup)
boxplot(store.betas[nburn:ngibbs,1:10])
ncol(store.betas)
View(betas.estim)
boxplot(store.betas[nburn:ngibbs,11:20])
ncol(store.betas)
seq(1:20, by = 2)
seq(1, 20, by = 2)
boxplot(store.betas[nburn:ngibbs, seq(1, 20, by = 2)])
boxplot(store.betas[nburn:ngibbs, seq(2, 20, by = 2)])
#look at theta
boxplot(mod.res$theta[nburn:ngibbs,])
theta.estim=apply(mod.res$theta[nburn:ngibbs,],2,mean)
plot(theta.estim,type='h',ylim=c(0,1))
theta.estim
setwd("~/Documents/Snail Kite Project/Data/armadillos")
dat<- read.csv("Modified Armadillo Data.csv", header = T, sep = ",")
View(dat)
str(dat)
dat$id<- as.character(dat$id)
dat$date<- as_datetime(dat$date)
str(dat)
# Separate tracks by region (N or S)
dat.N<- dat[dat$y > 8100000,]
dat.S<- dat[dat$y < 8100000,]
table(dat.N$region)
table(dat.S$region)
# Separate tracks by region (N or S)
dat.N<- dat %>% filter(region == "N")
dat.S<- dat %>% filter(region == "S")
# Read in rasters
setwd("~/Documents/Snail Kite Project/Data/armadillos/Environ Data")
rast<- dir(getwd(), "*.tif$")
for (i in rast) assign(i, raster(i))
plot(classes_DL_padrao.tif)
#Need to project rasters same as tracks
EucDist_cerc_Copy.tif<- projectRaster(EucDist_cerc_Copy.tif, crs = "+init=epsg:32721")
crs(EucDist_cercaAm.tif)<- crs(EucDist_cerc_Copy.tif)
## Aggregate spatial data to same scale (which will likely be 30m)
res(EucDist_cerc_Copy.tif) #13m 13m
## Aggregate spatial data to same scale (which will likely be 30m)
res(EucDist_cercaAm.tif) #1m 1m
dist2rdS_30m<- raster::aggregate(EucDist_cercaAm.tif,
fact = 30,
fun = mean)
dist2rdS_30m
res(EucDist_cerc_Copy.tif) #13m 13m
dist2rdN_30m<- resample(EucDist_cerc_Copy.tif, dist2rdS_30m, method = "bilinear")
extent(EucDist_cerc_Copy.tif)
EucDist_cerc_Copy.tif
as.numeric(extent(EucDist_cerc_Copy.tif))
as.vector(extent(EucDist_cerc_Copy.tif))
ex.ras<- raster(0, as.vector(extent(EucDist_cerc_Copy.tif)))
ex.ras<- raster(as.vector(extent(EucDist_cerc_Copy.tif)))
ex.ras<- raster(ext = extent(EucDist_cerc_Copy.tif), crs = "+init=epsg:32721")
ex.ras
ex.ras<- raster(ext = extent(EucDist_cerc_Copy.tif), crs = "+init=epsg:32721", res = 1)
ex.ras
dist2rdN_30m<- resample(EucDist_cerc_Copy.tif, ex.ras, method = "bilinear")
ex.ras<- raster(ext = extent(EucDist_cerc_Copy.tif), crs = "+init=epsg:32721", res = 30)
ex.ras
dist2rdN_30m<- resample(EucDist_cerc_Copy.tif, ex.ras, method = "bilinear")
dist2rdN_30m
plot(dist2rdN_30m)
plot(dist2rdS_30m)
path.N<- extract.covars(dat.N, dist2rdN_30m, crs = "+init=epsg:32721")
View(path.N)
rm(path.S)
path.S<- extract.covars(dat.S, dist2rdS_30m, crs = "+init=epsg:32721")
View(path.S)
names(path.N)[3]
names(path.S)[3]
names(path.N)[3]<- "dist2rd"
names(path.S)[3]<- "dist2rd"
#N
bar<- dist2rdN_30m
bar[]<- NA
bar[path.N$cell]<- dist2rdN_30m[path.N$cell]
plot(bar)
plot(st_as_sf(x = dat.N,
coords = c("x", "y"),
crs = "+init=epsg:32721"),
add = T)
bar<- as.data.frame(bar, xy = T)
View(bar)
names(bar)
names(bar)[3]<- "dist"
ggplot() +
geom_tile(data = bar, aes(x, y, fill = dist))
ggplot() +
geom_tile(data = bar, aes(x, y, fill = dist)) +
coord_cartesian()
ggplot() +
geom_tile(data = bar, aes(x, y, fill = dist)) +
scale_fill_viridis_c(option = "magma")
ggplot() +
geom_tile(data = bar, aes(x, y, fill = dist)) +
scale_fill_viridis_c(option = "magma", direction = -1) +
coord_cartesian()
ggplot() +
geom_tile(data = bar, aes(x, y, fill = dist)) +
scale_fill_viridis_c(option = "inferno", direction = -1) +
coord_cartesian()
ggplot() +
geom_tile(data = bar, aes(x, y, fill = dist)) +
scale_fill_viridis_c(option = "inferno", direction = -1) +
geom_path(data = dat.N, aes(x, y, color = id)) +
coord_cartesian()
ggplot() +
geom_tile(data = bar, aes(x, y, fill = dist), na.rm = T) +
scale_fill_viridis_c(option = "inferno", direction = -1) +
geom_path(data = dat.N, aes(x, y, color = id)) +
coord_cartesian()
ggplot() +
geom_tile(data = bar, aes(x, y, fill = dist), na.rm = T) +
scale_fill_viridis_c(option = "inferno", direction = -1, na.value = "n") +
geom_path(data = dat.N, aes(x, y, color = id)) +
coord_cartesian()
ggplot() +
geom_tile(data = bar, aes(x, y, fill = dist), na.rm = T) +
scale_fill_viridis_c(option = "inferno", direction = -1, na.value = "n") +
geom_path(data = dat.N, aes(x, y, color = id)) +
coord_cartesian() +
theme_bw()
ggplot() +
geom_tile(data = bar, aes(x, y, fill = dist), na.rm = T) +
scale_fill_viridis_c("", option = "inferno", direction = -1, na.value = "n") +
geom_path(data = dat.N, aes(x, y, color = id)) +
coord_cartesian() +
theme_bw()
#S
bar<- dist2rdS_30m
bar[]<- NA
bar[path.S$cell]<- dist2rdS_30m[path.S$cell]
bar<- as.data.frame(bar, xy = T)
names(bar)[3]<- "dist"
# plot(bar)
# plot(st_as_sf(x = dat.S,
#                           coords = c("x", "y"),
#                           crs = "+init=epsg:32721"),
#      add = T)
ggplot() +
geom_tile(data = bar, aes(x, y, fill = dist), na.rm = T) +
scale_fill_viridis_c(option = "inferno", direction = -1, na.value = "n") +
geom_path(data = dat.S, aes(x, y, color = id)) +
coord_cartesian() +
theme_bw()
# plot(bar)
# plot(st_as_sf(x = dat.S,
#                           coords = c("x", "y"),
#                           crs = "+init=epsg:32721"),
#      add = T)
ggplot() +
geom_tile(data = bar, aes(x, y, fill = dist), na.rm = T) +
scale_fill_viridis_c(option = "inferno", direction = -1, na.value = "n") +
# geom_path(data = dat.S, aes(x, y, color = id)) +
coord_cartesian() +
theme_bw()
# Adjust seg.id values for path.S
path.S<- df.to.list(path.S, "id")
for (i in 1:length(path.S)) {
path.S[[i]]$seg.id<- path.S[[i]]$seg.id + max(path.N$seg.id)
}
path.S<- bind_rows(path.S)
# Merge datasets
resist.dat<- rbind(path.N, path.S)
# Export data
setwd("~/Documents/Snail Kite Project/Data/R Scripts/ValleLabUF/resist")
write.csv(resist.dat, "Armadillo Resistance Data.csv", row.names = F)
library('Rcpp')
set.seed(1)
source('gibbs_resist.R')
source('gibbs_resist_func.R')
sourceCpp('resist_aux.cpp')
dat<- read.csv('Armadillo Resistance Data.csv',as.is=T)
View(dat)
View(dat)
dat$dist2rd<- scale(dat$dist2rd, center = TRUE, scale = TRUE)  #set to mean = 0 and sd = 1
ind=grep('dist',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
seg.id=dat$seg.id
max(seg.id)
ngroup=10
#get y soma
tmp=unique(dat[,c('seg.id','dt')])
cond=!is.na(tmp$dt)
ysoma=tmp[cond,'dt']
ngibbs=10000
nburn=ngibbs/2
#priors
gamma1=0.1
var.betas=c(100,rep(1,ncol(xmat)-1))
mod.res=gibbs_resist(ysoma=ysoma,xmat=xmat,seg.id=seg.id,ngroup=ngroup,
ngibbs=ngibbs,nburn=nburn,var.betas=var.betas,
gamma1=gamma1)
library(tictoc)
set.seed(1)
source('gibbs_resist.R')
source('gibbs_resist_func.R')
sourceCpp('resist_aux.cpp')
dat<- read.csv('Armadillo Resistance Data.csv',as.is=T)
dat$dist2rd<- scale(dat$dist2rd, center = TRUE, scale = TRUE)  #set to mean = 0 and sd = 1
ind=grep('dist',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
seg.id=dat$seg.id
ngroup=10
#get y soma
tmp=unique(dat[,c('seg.id','dt')])
cond=!is.na(tmp$dt)
ysoma=tmp[cond,'dt']
ngibbs=10000
nburn=ngibbs/2
#priors
gamma1=0.1
var.betas=c(100,rep(1,ncol(xmat)-1))
tic()
mod.res=gibbs_resist(ysoma=ysoma,xmat=xmat,seg.id=seg.id,ngroup=ngroup,
ngibbs=ngibbs,nburn=nburn,var.betas=var.betas,
gamma1=gamma1)
toc()
set.seed(1)
source('gibbs_resist.R')
source('gibbs_resist_func.R')
sourceCpp('resist_aux.cpp')
dat<- read.csv('Armadillo Resistance Data.csv',as.is=T)
dat$dist2rd<- scale(dat$dist2rd, center = TRUE, scale = TRUE)  #set to mean = 0 and sd = 1
ind=grep('dist',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
seg.id=dat$seg.id
ngroup=10
#get y soma
tmp=unique(dat[,c('seg.id','dt')])
cond=!is.na(tmp$dt)
ysoma=tmp[cond,'dt']
ngibbs=1000
nburn=ngibbs/2
#priors
gamma1=0.1
var.betas=c(100,rep(1,ncol(xmat)-1))
tic()
mod.res=gibbs_resist(ysoma=ysoma,xmat=xmat,seg.id=seg.id,ngroup=ngroup,
ngibbs=ngibbs,nburn=nburn,var.betas=var.betas,
gamma1=gamma1)
toc()
930/60
store.llk=mod.res$llk
store.b=mod.res$b.gamma
store.betas=mod.res$betas
z.estim=mod.res$z.estim
#look at overall convergence
plot(store.llk,type='l')
#look at overall convergence
plot(store.llk,type='l')
nburn=5000
abline(v=nburn,col='red')
nburn=500
abline(v=nburn,col='red')
plot(store.llk[nburn:ngibbs],type='l')
acf(store.llk[nburn:ngibbs])
plot(store.b,type='l')
plot(store.b[nburn:ngibbs],type='l')
acf(store.b[nburn:ngibbs])
#look at convergence betas
par(mfrow=c(3,3),mar=rep(1,4))
ind=sample(1:ncol(store.betas),size=9)
for (i in 1:9) plot(store.betas[1:ngibbs,ind[i]],type='l')
for (i in 1:9) plot(store.betas[nburn:ngibbs,ind[i]],type='l')
#look at betas
ngroup=10
par(mfrow=c(1,1),mar=rep(3,4))
betas.estim=matrix(store.betas[ngibbs,],ncol(store.betas)/ngroup,ngroup)
boxplot(store.betas[nburn:ngibbs, seq(1, 20, by = 2)])  #intercepts
boxplot(store.betas[nburn:ngibbs, seq(2, 20, by = 2)])  #slopes
#look at theta
boxplot(mod.res$theta[nburn:ngibbs,])
theta.estim=apply(mod.res$theta[nburn:ngibbs,],2,mean)
plot(theta.estim,type='h',ylim=c(0,1))
theta.estim
library('Rcpp')
library(tictoc)
set.seed(1)
source('gibbs_resist.R')
source('gibbs_resist_func.R')
sourceCpp('resist_aux.cpp')
dat<- read.csv('Armadillo Resistance Data.csv',as.is=T)
dat$dist2rd<- scale(dat$dist2rd, center = TRUE, scale = TRUE)  #set to mean = 0 and sd = 1
ind=grep('dist',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
seg.id=dat$seg.id
ngroup=10
#get y soma
tmp=unique(dat[,c('seg.id','dt')])
cond=!is.na(tmp$dt)
ysoma=tmp[cond,'dt']
ngibbs=10000
nburn=ngibbs/2
#priors
gamma1=0.1
var.betas=c(100,rep(1,ncol(xmat)-1))
tic()
mod.res=gibbs_resist(ysoma=ysoma,xmat=xmat,seg.id=seg.id,ngroup=ngroup,
ngibbs=ngibbs,nburn=nburn,var.betas=var.betas,
gamma1=gamma1)
toc()
7356/60
store.llk=mod.res$llk
store.b=mod.res$b.gamma
store.betas=mod.res$betas
z.estim=mod.res$z.estim
#look at overall convergence
plot(store.llk,type='l')
nburn=5000
abline(v=nburn,col='red')
plot(store.llk[nburn:ngibbs],type='l')
acf(store.llk[nburn:ngibbs])
plot(store.b,type='l')
plot(store.b[nburn:ngibbs],type='l')
acf(store.b[nburn:ngibbs])
#look at convergence betas
par(mfrow=c(3,3),mar=rep(1,4))
ind=sample(1:ncol(store.betas),size=9)
for (i in 1:9) plot(store.betas[1:ngibbs,ind[i]],type='l')
for (i in 1:9) plot(store.betas[nburn:ngibbs,ind[i]],type='l')
#look at betas
ngroup=10
par(mfrow=c(1,1),mar=rep(3,4))
betas.estim=matrix(store.betas[ngibbs,],ncol(store.betas)/ngroup,ngroup)
boxplot(store.betas[nburn:ngibbs, seq(1, 20, by = 2)])  #intercepts
boxplot(store.betas[nburn:ngibbs, seq(2, 20, by = 2)])  #slopes
#look at theta
boxplot(mod.res$theta[nburn:ngibbs,])
theta.estim=apply(mod.res$theta[nburn:ngibbs,],2,mean)
plot(theta.estim,type='h',ylim=c(0,1))
theta.estim
library('Rcpp')
library(tictoc)
set.seed(1)
source('gibbs_resist.R')
source('gibbs_resist_func.R')
sourceCpp('resist_aux.cpp')
dat<- read.csv('Armadillo Resistance Data.csv',as.is=T)
dat$dist2rd<- scale(dat$dist2rd, center = TRUE, scale = TRUE)  #set to mean = 0 and sd = 1
ind=grep('dist',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
seg.id=dat$seg.id
ngroup=10
